summary() %>%
names()
region_names <- region_names[-length(region_names)]
out_file_names <- region_names %>%
paste0(atlas_name, "_", ., ".nii.gz") %>%
file.path(region_out_dir, .)
mapply(
function(region_name, out_file_name) {
temp <- atlas * 1 # causes R to make a copy of atlas at a new address
temp[atlas == region_name] <- 1
temp[atlas != region_name] <- 0
antsImageWrite(temp, out_file_name)
}, as.numeric(region_names),
out_file_names)
return(out_file_names)
}
get_names <- function(paths) {
names_list <- lapply(paths, function(path) {
split_path <- str_split(path, "/") %>%
unlist()
file_name <- split_path[length(split_path)]
})
unlist(names_list)
}
transform_to_MNI <- function(images, paths, MNI_transform_out_dir) {
MNI <- check_ants(file.path(settings$input_dir, "references/atlases/MNI152_T1_1mm_brain.nii.gz"))
transform_list <- c(file.path(settings$input_dir, "references/transformations/PNC-MNI_0Warp.nii.gz"),
file.path(settings$input_dir, "references/transformations/PNC-MNI_1Affine.mat"))
file_names <- get_names(paths)
mapply(function(image, file_name, MNI, transform_list) {
image_transformed <- antsApplyTransforms(fixed = MNI,
moving = image,
transformlist = transform_list,
interpolator = "nearestNeighbor",
imagetype = 0)
antsImageWrite(image_transformed, file.path(MNI_transform_out_dir, file_name))
return(file.path(MNI_transform_out_dir, file_name))
}, image = images, file_name = file_names,
MoreArgs = list(MNI = MNI, transform_list = transform_list))
}
project_to_surface <- function(image_MNI_paths, out_dir) {
dir.create(out_dir, showWarnings = FALSE)
hemi_paths <- lapply(image_MNI_paths, function(image_path) {
outfile = get_names(image_path) %>% str_remove(".nii.gz") %>% str_glue(".mgh")
lh <- mri_vol2surf(mov = image_path,
target_subject = 'fsaverage5',
opts = "--interp nearest",
outfile = file.path(out_dir, outfile),
hemi = "lh")
rh <- mri_vol2surf(mov = image_path,
target_subject = 'fsaverage5',
opts = "--interp nearest",
outfile = file.path(out_dir, outfile),
hemi = "rh")
c(file.path(lh), file.path(rh))
})
num_files <- length(hemi_paths)
paths_df <- hemi_paths %>%
unlist() %>%
matrix(byrow = TRUE, ncol = 1) %>%
as.data.frame() %>%
rename(paths = "V1") %>%
mutate(hemisphere = rep(c("lh", "rh"), num_files))
paths_df
}
preprocess_for_spin_test <- function(file_paths = NULL, atlas_name = c("", "yeo7", "aal"),
fs_images_dir,
file_path_output_dir = "") {
if (is.null(file_paths)) {
if (atlas_name == "yeo7") {
atlas <- check_ants(file.path(settings$input_dir, "references/atlases/7yeonetworkPNC.nii.gz"))
atlas_output_dir <- "yeo7_regions"
}
if (atlas_name == "aal") {
atlas <- check_ants(file.path(settings$input_dir, "references/atlases/AAL_atlas_PNC.nii.gz"))
atlas_output_dir <- "aal_regions"
for(i in 0:9) {
lower <- i * 1000
upper <- (i + 1) * 1000
atlas[atlas >= lower & atlas < upper] <- lower
}
}
region_paths <- split_atlas_into_regions(atlas,
atlas_name = atlas_name,
file.path(fs_images_dir, "PNC_space", atlas_output_dir))
region_images <- check_ants(region_paths)
region_transformed_paths <- transform_to_MNI(region_images,
region_paths,
file.path(fs_images_dir, "MNI_space", atlas_output_dir))
region_sphere <- project_to_surface(region_transformed_paths,
file.path(fs_images_dir, "surfaces", atlas_output_dir))
return(NULL)
}
if (!is.null(file_paths)) {
pval_images <- check_ants(file_paths)
pval_transformed_paths <- transform_to_MNI(pval_images,
file_paths,
file.path(fs_images_dir, "MNI_space", file_path_output_dir))
pval_sphere <- project_to_surface(pval_transformed_paths,
file.path(fs_images_dir, "surfaces", file_path_output_dir))
return(NULL)
}
}
Sys.setenv(FS_LICENSE="/home/fengling/software/freesurfer/license.txt")
set_fs_subj_dir("/root/software/freesurfer/subjects")
pval_descriptive <- read_csv(file.path(settings$output_dir, "csvs/pval_descriptive_stats.csv"))
pval_coupling_paths <- pval_descriptive %>%
filter(mc_correction == "fdr05",
matrix_type != "modality") %>%
pull(file_paths) %>%
as.list()
pval_modality_paths <- pval_descriptive %>%
filter(mc_correction == "fdr05",
matrix_type == "modality") %>%
pull(file_paths) %>%
as.list()
fs_images_dir <- file.path(settings$output_dir, "freesurfer_images")
#atlas
preprocess_for_spin_test(atlas_name = "yeo7", #TODO should I apply grey matter mask?
fs_images_dir = fs_images_dir)
preprocess_for_spin_test(atlas_name = "aal",
fs_images_dir = fs_images_dir)
#pvals
preprocess_for_spin_test(file_paths = pval_coupling_paths,
fs_images_dir = fs_images_dir,
file_path_output_dir = "pvals/adjusted")
preprocess_for_spin_test(file_paths = pval_modality_paths,
fs_images_dir = fs_images_dir,
file_path_output_dir = "pvals/modality")
#descriptive
preprocess_for_spin_test(file_paths = list.files(file.path(settings$output_dir, "niftis/descriptive"),
full.names = TRUE) %>% as.list(),
fs_images_dir = fs_images_dir,
file_path_output_dir = "descriptive")
rm(pval_coupling_paths, pval_descriptive, pval_modality_paths, fs_images_dir, get_names, mri_vol2surf, mri_vol2surf.help, preprocess_for_spin_test, project_to_surface, split_atlas_into_regions, transform_to_MNI)
library(magrittr)
library(readr)
library(extrantsr)
library(stringr)
library(IMCo)
getd()
getwd()
load(file.path(top_dir, "input/csvs/settings.RData")) #load settings.RData
top_dir = getwd()
top_dir <- file.path(getwd(), "../..")
top_dir = getwd()
load(file.path(top_dir, "input/csvs/settings.RData")) #load settings.RData
top_dir = getwd()
load(file.path(top_dir, "input/csvs/settings.RData")) #load settings.RData
predictors <- read_csv(settings$predictors_path)
input_filepaths <- read_csv(settings$input_filepaths_path)
cores <- 16
# Functions
load_images <- function(dir, mask, file_paths) {
if (!is.null(file_paths)) {
file_paths <- file_paths
} else {
files <- list.files(dir)
file_paths <- file.path(dir, files)
}
image_vector_list <- lapply(file_paths,
function(x, mask) {
image <- extrantsr::check_ants(x)
image_vector <- image %>% as.numeric()
mask_vector <- mask %>% as.numeric()
image_vector[mask_vector == 0] <- NA
image_vector_in_mask <- image_vector[!is.na(image_vector)]
image_vector_in_mask[image_vector_in_mask == 0] <- NA #remove any true 0s from coupling
return(image_vector_in_mask)
},
mask = mask
)
return(image_vector_list)
}
transpose_list <- function(list) {
matrix <- list %>%
unlist() %>%
matrix(byrow = TRUE, nrow = length(list))
transposed_list <- lapply(seq_len(ncol(matrix)), function(i) matrix[, i])
return(transposed_list)
}
make_descriptive_images <- function(voxel_vector_list) {
descriptive_vector <- lapply(voxel_vector_list, function(voxel_vector) {
voxel_mean <- sum(voxel_vector)/length(voxel_vector)
voxel_variance <- var(voxel_vector)
return(c(voxel_mean, voxel_variance))
}) %>% unlist()
voxel_mean_vector <- descriptive_vector[c(T, F)]
voxel_variance_vector <- descriptive_vector[c(F, T)]
return(list(voxel_mean_vector, voxel_variance_vector))
}
get_pvals_by_voxel <- function(voxel_vector, predictors, modality_names) {
if (length(voxel_vector) != nrow(predictors)) {
stop("n doesn't match")
}
if (sum(!is.na(voxel_vector)) <= 15) {
return(c(1, 1, 1))
}
if ("idemo" %in% modality_names) {
regression <- lm(voxel_vector ~
sex + ageAtScan1 +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion + idemoRelMeanRMSMotion,
data = predictors) %>%
summary()
reg_pvals <- regression$coefficients[c(2, 3), 4]
interaction_regression <- lm(voxel_vector ~
sex * ageAtScan1 +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion + idemoRelMeanRMSMotion,
data = predictors) %>%
summary()
int_pvals <- interaction_regression$coefficients[dim(interaction_regression$coefficients)[1], 4]
} else if ("antsCt" %in% modality_names | "gmd" %in% modality_names) {
regression <- lm(voxel_vector ~
sex + ageAtScan1 +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion + averageManualRating,
data = predictors) %>%
summary()
reg_pvals <- regression$coefficients[c(2, 3), 4]
interaction_regression <- lm(voxel_vector ~
sex * ageAtScan1 +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion + averageManualRating,
data = predictors) %>%
summary()
int_pvals <- interaction_regression$coefficients[dim(interaction_regression$coefficients)[1], 4]
} else {
regression <- lm(voxel_vector ~
sex + ageAtScan1 +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion,
data = predictors) %>%
summary()
reg_pvals <- regression$coefficients[c(2, 3), 4]
interaction_regression <- lm(voxel_vector ~
sex * ageAtScan1 +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion,
data = predictors) %>%
summary()
int_pvals <- interaction_regression$coefficients[dim(interaction_regression$coefficients)[1], 4]
}
pvals <- c(reg_pvals, int_pvals)
return(pvals)
}
write_pvals <- function(image_list, mask, dir, is_descriptive, is_modality) {
mask_indices <- which(as.array(mask) > 0)
reference <- extrantsr::check_ants(file.path(dir, list.files(dir)[[1]]))
file_name <- (dir %>% str_split("/"))[[1]]
file_name <- file_name[length(file_name)]
if (is_descriptive) {
descriptive_dir <- file.path(settings$output_dir, "niftis/descriptive")
dir.create(descriptive_dir, showWarnings = FALSE)
names <- c("_mean", "_variance")
for (i in 1:length(image_list)) {
descriptive_image <- make_ants_image(image_list[[i]], mask_indices, reference)
ANTsRCore::antsImageWrite(
descriptive_image,
file.path(descriptive_dir,
paste0(file_name, names[i], ".nii.gz")))
}
return(NULL)
}
if (is_modality) {
pval_output_dir <- file.path(settings$output_dir, "niftis/pvals/modality_raw")
}
else {
pval_output_dir <- file.path(settings$output_dir, "niftis/pvals/raw")
}
for (i in 1:length(image_list)) {
pval_image <- make_ants_image(image_list[[i]], mask_indices, reference)
ANTsRCore::antsImageWrite(
pval_image,
file.path(pval_output_dir,
paste0(file_name, "_pval_", i, ".nii.gz")))
}
return(NULL)
}
analyze_coupled_images <- function(nifti_dir, mask, predictors, cores = 2, is_modality, file_paths = NULL) {
mask <- extrantsr::check_ants(mask)
cat("Loading images\n")
image_vector_list <- load_images(nifti_dir, mask, file_paths)
voxel_vector_list <- transpose_list(image_vector_list)
cat("Making descriptive images\n")
descriptive_list <- make_descriptive_images(voxel_vector_list)
cat("Sending out voxel_vectors!\n")
pvalbyvoxel_list <- parallel::mclapply(voxel_vector_list,
get_pvals_by_voxel,
predictors = predictors,
modality_names = settings$modalities,
mc.cores = cores)
# pvalbyvoxel_list <- lapply(voxel_vector_list,
#                            get_pvals_by_voxel,
#                            predictors = predictors)
pvalbycoef_list <- transpose_list(pvalbyvoxel_list)
cat("Writing pvals!\n")
write_pvals(descriptive_list, mask, nifti_dir, is_descriptive = TRUE, is_modality)
write_pvals(pvalbycoef_list, mask, nifti_dir, is_descriptive = FALSE, is_modality)
return(NULL)
}
get_pvals_by_voxel <- function(voxel_vector, predictors, modality_names) {
if (length(voxel_vector) != nrow(predictors)) {
stop("n doesn't match")
}
if (sum(!is.na(voxel_vector)) <= 15) {
return(c(1, 1, 1))
}
if ("idemo" %in% modality_names) {
regression <- lm(voxel_vector ~
sex + ageAtScan1 +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion + idemoRelMeanRMSMotion,
data = predictors) %>%
summary()
reg_pvals <- regression$coefficients[c(2, 3), 4]
interaction_regression <- lm(voxel_vector ~
sex * ageAtScan1 +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion + idemoRelMeanRMSMotion,
data = predictors) %>%
summary()
int_pvals <- interaction_regression$coefficients[dim(interaction_regression$coefficients)[1], 4]
} else if ("antsCt" %in% modality_names | "gmd" %in% modality_names) {
browser()
regression <- lm(voxel_vector ~
sex + ageAtScan1 +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion + averageManualRating,
data = predictors) %>%
summary()
reg_pvals <- regression$coefficients[c(2, 3), 4]
interaction_regression <- lm(voxel_vector ~
sex * ageAtScan1 +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion + averageManualRating,
data = predictors) %>%
summary()
int_pvals <- interaction_regression$coefficients[dim(interaction_regression$coefficients)[1], 4]
} else {
regression <- lm(voxel_vector ~
sex + ageAtScan1 +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion,
data = predictors) %>%
summary()
reg_pvals <- regression$coefficients[c(2, 3), 4]
interaction_regression <- lm(voxel_vector ~
sex * ageAtScan1 +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion,
data = predictors) %>%
summary()
int_pvals <- interaction_regression$coefficients[dim(interaction_regression$coefficients)[1], 4]
}
pvals <- c(reg_pvals, int_pvals)
return(pvals)
}
settings$modalities
analyze_coupled_images(nifti_dir = file.path(settings$output_dir, "niftis/coupled/unscaled_wcor"),
mask = settings$mask_path,
predictors = predictors,
cores = cores,
is_modality = FALSE)
# Run
analyze_coupled_images(nifti_dir = file.path(settings$output_dir, "niftis/coupled/global_wcov"),
mask = settings$mask_path,
predictors = predictors,
cores = cores,
is_modality = FALSE)
analyze_coupled_images <- function(nifti_dir, mask, predictors, cores = 2, is_modality, file_paths = NULL) {
mask <- extrantsr::check_ants(mask)
cat("Loading images\n")
image_vector_list <- load_images(nifti_dir, mask, file_paths)
voxel_vector_list <- transpose_list(image_vector_list)
cat("Making descriptive images\n")
descriptive_list <- make_descriptive_images(voxel_vector_list)
cat("Sending out voxel_vectors!\n")
browser()
pvalbyvoxel_list <- parallel::mclapply(voxel_vector_list,
get_pvals_by_voxel,
predictors = predictors,
modality_names = settings$modalities,
mc.cores = cores)
# pvalbyvoxel_list <- lapply(voxel_vector_list,
#                            get_pvals_by_voxel,
#                            predictors = predictors)
pvalbycoef_list <- transpose_list(pvalbyvoxel_list)
cat("Writing pvals!\n")
write_pvals(descriptive_list, mask, nifti_dir, is_descriptive = TRUE, is_modality)
write_pvals(pvalbycoef_list, mask, nifti_dir, is_descriptive = FALSE, is_modality)
return(NULL)
}
# Run
analyze_coupled_images(nifti_dir = file.path(settings$output_dir, "niftis/coupled/global_wcov"),
mask = settings$mask_path,
predictors = predictors,
cores = cores,
is_modality = FALSE)
ls
get_pvals_by_voxel(voxel_vector_list[[1]], predictors, settings$modalities)
regression
reg_pvals
interaction_regression
pvals
int_pvals
coef(regression)
coef(regression) -> test
test$sexMale
test["sexMale"]
regression$terms
plot(voxel_vector, predictors$ageAtScan1)
plot(voxel_vector, predictors$sex)
predictors$sex
plot(voxel_vector, as.numeric(predictors$sex))
as.numeric(predictors$sex)
plot(voxel_vector, predictors$sex == "Male")
library(mgcv)
gam(voxel_vector ~ s(sex) + s(ageAtScan1) + race2 + pcsalRelMeanRMSMotion + restRelMeanRMSMotion + averageManualRating + s(sex, by = ageAtScan1), data = predictors)
gam(voxel_vector ~ s(sex) + s(ageAtScan1) + race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion + averageManualRating + s(sex, by = ageAtScan1), data = predictors)
gam(voxel_vector ~ s(sex) + s(ageAtScan1) + race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion + averageManualRating + s(sex, by = ageAtScan1), data = predictors, method = "REML")
gam(voxel_vector ~ s(sex, k = 10) + s(ageAtScan1, k = 10) + race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion + averageManualRating, data = predictors, method = "REML")
names(predictors)
length(voxel_vector)
gam(voxel_vector ~ s(sex, k = 10) + s(ageAtScan1, k = 10), data = predictors, method = "REML")
gam(voxel_vector ~ sex + ageAtScan1, data = predictors, method = "REML")
gam(voxel_vector ~ s(sex), data = predictors, method = "REML")
gam(voxel_vector ~ s(predictors$sex), method = "REML")
cbind(predictors, voxel_vector)
cbind(predictors, voxel_vector) -> test
names(test)
gam(voxel_vector ~ s(sex), data = predictors, method = "REML")
gam(voxel_vector ~ s(sex), data = test, method = "REML")
length(voxel_vector)
predictors$sex
gam(voxel_vector ~ sex + s(ageAtScan1), data = predictors, method = "REML")
gam(voxel_vector ~ sex + s(ageAtScan1), data = predictors, method = "REML") %>% summary()
gam(voxel_vector ~ sex + s(ageAtScan1), data = predictors, method = "REML") %>% summary() -> test
test
test$p.table
test$s.table
test$s.table %>% dim
test$s.table %>% names
test$s.table %>% typeof
gam_regression <- gam(voxel_vector ~
sex + s(ageAtScan1) +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion + averageManualRating)
gam_regression <- gam(voxel_vector ~
sex + s(ageAtScan1) +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion + averageManualRating,
data = predictors)
gam_regression
gam_regression <- gam(voxel_vector ~
sex + s(ageAtScan1) +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion + averageManualRating,
data = predictors) %>% summary()
gam_regression
gam_regression <- gam(voxel_vector ~
sex + s(ageAtScan1, by = sex) +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion + averageManualRating,
data = predictors) %>% summary()
gam_regression <- gam(voxel_vector ~
sex + s(ageAtScan1, by = sex) +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion + averageManualRating,
data = predictors) %>% summary()
gam_regression <- gam(voxel_vector ~
sex + s(ageAtScan1) +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion + averageManualRating,
data = predictors, method = "REML") %>% summary()
gam_regression <- gam(voxel_vector ~
sex + s(ageAtScan1, by = sex) +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion + averageManualRating,
data = predictors, method = "REML") %>% summary()
gam_regression <- gam(voxel_vector ~
sex + s(ageAtScan1) +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion + averageManualRating,
data = predictors, method = "REML") %>% summary()
gam_regression
gam_regression <- gam(voxel_vector ~
sex + s(ageAtScan1, k = 10) +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion + averageManualRating,
data = predictors, method = "REML") %>% summary()
gam_regression
gam_regression <- gam(voxel_vector ~
sex + s(ageAtScan1, k = 10) +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion + averageManualRating,
data = predictors, method = "REML") %>% summary(); gam_regression
gam_regression <- gam(voxel_vector ~
sex + s(ageAtScan1, k = 20) +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion + averageManualRating,
data = predictors, method = "REML") %>% summary(); gam_regression
gam_regression <- gam(voxel_vector ~
s(ageAtScan1, k = 20, by = sex) +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion + averageManualRating,
data = predictors, method = "REML") %>% summary(); gam_regression
names(predictors)
summary(predictors)
gam_regression <- gam(voxel_vector ~
sex + s(ageAtScan1, k = 10, by = as.factor(predictors$sex)) +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion + averageManualRating,
data = predictors, method = "REML") %>% summary()
gam_regression
gam_regression <- gam(voxel_vector ~
sex + s(ageAtScan1) + s(ageAtScan1, k = 10, by = as.factor(predictors$sex)) +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion + averageManualRating,
data = predictors, method = "REML") %>% summary(); gam_regression
gam_regression <- gam(voxel_vector ~
+                             sex + s(ageAtScan1)  +
+                             race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion + averageManualRating,
+                           data = predictors, method = "REML") %>% summary(); gam_regression
gam_regression <- gam(voxel_vector ~ sex + s(ageAtScan1)  + race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion + averageManualRating, data = predictors, method = "REML") %>% summary(); gam_regression
gam_regression <- gam(voxel_vector ~ sex + s(ageAtScan1) + s(ageAtScan1, by = as.factor(predictors$sex)) race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion + averageManualRating, data = predictors, method = "REML") %>% summary(); gam_regression
gam_regression <- gam(voxel_vector ~ sex + s(ageAtScan1) + s(ageAtScan1, by = as.factor(predictors$sex)) + race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion + averageManualRating, data = predictors, method = "REML") %>% summary(); gam_regression
gam_regression_0 <- gam(voxel_vector ~ sex + s(ageAtScan1)  + race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion + averageManualRating, data = predictors, method = "REML") %>% summary(); gam_regression_0
anova(gam_regression_0, gam_regression)
anova.gam(gam_regression, gam_regression_0)
gam_regression_0 <- gam(voxel_vector ~ sex + s(ageAtScan1)  + race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion + averageManualRating, data = predictors, method = "REML"); gam_regression_0
gam_regression <- gam(voxel_vector ~ sex + s(ageAtScan1) + s(ageAtScan1, by = as.factor(predictors$sex)) + race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion + averageManualRating, data = predictors, method = "REML"); gam_regression
anova(gam_regression, gam_regression_0)
anova(gam_regression, gam_regression_0) %>% summary()
anova(gam_regression, gam_regression_0, test = "LRT")
voxel_vector %>% lenght()
voxel_vector_list %>% length()
