race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion + idemoRelMeanRMSMotion,
data = predictors) %>%
summary()
reg_pvals <- regression$coefficients[c(2, 3), 4]
interaction_regression <- lm(voxel_vector ~
sex * ageAtScan1 +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion + idemoRelMeanRMSMotion,
data = predictors) %>%
summary()
int_pvals <- interaction_regression$coefficients[dim(interaction_regression$coefficients)[1], 4]
} else if ("antsCt" %in% modality_names | "gmd" %in% modality_names) {
regression <- lm(voxel_vector ~
sex + ageAtScan1 +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion + averageManualRating,
data = predictors) %>%
summary()
reg_pvals <- regression$coefficients[c(2, 3), 4]
interaction_regression <- lm(voxel_vector ~
sex * ageAtScan1 +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion + averageManualRating,
data = predictors) %>%
summary()
int_pvals <- interaction_regression$coefficients[dim(interaction_regression$coefficients)[1], 4]
} else {
regression <- lm(voxel_vector ~
sex + ageAtScan1 +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion,
data = predictors) %>%
summary()
reg_pvals <- regression$coefficients[c(2, 3), 4]
interaction_regression <- lm(voxel_vector ~
sex * ageAtScan1 +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion,
data = predictors) %>%
summary()
int_pvals <- interaction_regression$coefficients[dim(interaction_regression$coefficients)[1], 4]
}
pvals <- c(reg_pvals, int_pvals)
return(pvals)
}
write_pvals <- function(image_list, mask, dir, is_descriptive, is_modality) {
mask_indices <- which(as.array(mask) > 0)
reference <- extrantsr::check_ants(file.path(dir, list.files(dir)[[1]]))
file_name <- (dir %>% str_split("/"))[[1]]
file_name <- file_name[length(file_name)]
if (is_descriptive) {
descriptive_dir <- file.path(settings$output_dir, "niftis/descriptive")
dir.create(descriptive_dir, showWarnings = FALSE)
names <- c("_mean", "_variance")
for (i in 1:length(image_list)) {
descriptive_image <- make_ants_image(image_list[[i]], mask_indices, reference)
ANTsRCore::antsImageWrite(
descriptive_image,
file.path(descriptive_dir,
paste0(file_name, names[i], ".nii.gz")))
}
return(NULL)
}
if (is_modality) {
pval_output_dir <- file.path(settings$output_dir, "niftis/pvals/modality_raw")
}
else {
pval_output_dir <- file.path(settings$output_dir, "niftis/pvals/raw")
}
for (i in 1:length(image_list)) {
pval_image <- make_ants_image(image_list[[i]], mask_indices, reference)
ANTsRCore::antsImageWrite(
pval_image,
file.path(pval_output_dir,
paste0(file_name, "_pval_", i, ".nii.gz")))
}
return(NULL)
}
analyze_coupled_images <- function(nifti_dir, mask, predictors, cores = 2, is_modality, file_paths = NULL) {
mask <- extrantsr::check_ants(mask)
cat("Loading images\n")
image_vector_list <- load_images(nifti_dir, mask, file_paths)
voxel_vector_list <- transpose_list(image_vector_list)
cat("Making descriptive images\n")
descriptive_list <- make_descriptive_images(voxel_vector_list)
cat("Sending out voxel_vectors!\n")
browser()
pvalbyvoxel_list <- parallel::mclapply(voxel_vector_list,
get_pvals_by_voxel,
predictors = predictors,
modality_names = settings$modalities,
mc.cores = cores)
# pvalbyvoxel_list <- lapply(voxel_vector_list,
#                            get_pvals_by_voxel,
#                            predictors = predictors)
pvalbycoef_list <- transpose_list(pvalbyvoxel_list)
cat("Writing pvals!\n")
write_pvals(descriptive_list, mask, nifti_dir, is_descriptive = TRUE, is_modality)
write_pvals(pvalbycoef_list, mask, nifti_dir, is_descriptive = FALSE, is_modality)
return(NULL)
}
# Run
analyze_coupled_images(nifti_dir = file.path(settings$output_dir, "niftis/coupled/global_wcov"),
mask = settings$mask_path,
predictors = predictors,
cores = cores,
is_modality = FALSE)
"hello" %in% hello
# Run
analyze_coupled_images(nifti_dir = file.path(settings$output_dir, "niftis/coupled/global_wcov"),
mask = settings$mask_path,
predictors = predictors,
cores = cores,
is_modality = FALSE)
voxel_vector_list[[1]] %>% sum()
voxel_vector_list[[2]] %>% sum()
for (i in 1:784) {}
for (i in 1:784) {print(voxel_vector_list[[i]] %>% sum())}
for (i in 1:784) {print(voxel_vector_list[[i]] %>% sum())}
sum(c(1, 2, NA))
get_pvals_by_voxel(voxel_vector = voxel_vector_list[[1]], predictors = predictors, modality_names = settings$modalities)
reg_pvals
int_pvals
interaction_regression$coefficients
t#n
get_pvals_by_voxel(voxel_vector = voxel_vector_list[[2
]], predictors = predictors, modality_names = settings$modalities)
sum(voxel_vector_list[[1]])
length(pvalbyvoxel_list[[1]])
pvalbyvoxel_list[[1]]
pvalbyvoxel_list[[3]]
get_pvals_by_voxel(voxel_vector = voxel_vector_list[[2]], predictors = predictors, modality_names = settings$modalities)
get_pvals_by_voxel(voxel_vector = voxel_vector_list[[3]], predictors = predictors, modality_names = settings$modalities)
get_pvals_by_voxel(voxel_vector = voxel_vector_list[[4]], predictors = predictors, modality_names = settings$modalities)
pvalbyvoxel_list[[3]]
predictors
predictors$averageManualRating
summary(predictors)
is.na(predi)
is.na(predictors)
is.na(predictors) %>% sum()
typeof(voxel_vector_list[[1]])
typeof(voxel_vector_list[[2]])
typeof(voxel_vector_list[[3]])
typeof(voxel_vector_list[[4]])
typeof(voxel_vector_list[[5]])
summary(predictors)
averageManualRating
predictors$averageManualRating
predictors$averageManualRating %>% plot()
get_pvals_by_voxel(voxel_vector = voxel_vector_list[[4]], predictors = predictors, modality_names = settings$modalities)
get_pvals_by_voxel(voxel_vector = voxel_vector_list[[5]], predictors = predictors, modality_names = settings$modalities)
get_pvals_by_voxel(voxel_vector = voxel_vector_list[[6]], predictors = predictors, modality_names = settings$modalities)
settings$modalities
?mclapply
pvalbyvoxel_list <- lappyl(voxel_vector_list, get_pvals_by_voxel, predictors = predictors,
modality_names = settings$modalities)
pvalbyvoxel_list <- lapply(voxel_vector_list, get_pvals_by_voxel, predictors = predictors,
modality_names = settings$modalities)
settings$modalities
modality_names
modality_names = settings$modalities
ff
ff
settings$modalities
typeof(settings$modalities)
as.character(settings$modalities)
as.character(settings$modalities) %>% typeof()
as.character(settings$modalities) %>% class
get_pvals_by_voxel <- function(voxel_vector, predictors, modality_names) {
if (length(voxel_vector) != nrow(predictors)) {
stop("n doesn't match")
}
if ("idemo" %in% modality_names) {
regression <- lm(voxel_vector ~
sex + ageAtScan1 +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion + idemoRelMeanRMSMotion,
data = predictors) %>%
summary()
reg_pvals <- regression$coefficients[c(2, 3), 4]
interaction_regression <- lm(voxel_vector ~
sex * ageAtScan1 +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion + idemoRelMeanRMSMotion,
data = predictors) %>%
summary()
int_pvals <- interaction_regression$coefficients[dim(interaction_regression$coefficients)[1], 4]
} else if ("antsCt" %in% modality_names | "gmd" %in% modality_names) {
regression <- lm(voxel_vector ~
sex + ageAtScan1 +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion + averageManualRating,
data = predictors) %>%
summary()
reg_pvals <- regression$coefficients[c(2, 3), 4]
interaction_regression <- lm(voxel_vector ~
sex * ageAtScan1 +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion + averageManualRating,
data = predictors) %>%
summary()
int_pvals <- interaction_regression$coefficients[dim(interaction_regression$coefficients)[1], 4]
} else {
regression <- lm(voxel_vector ~
sex + ageAtScan1 +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion,
data = predictors) %>%
summary()
reg_pvals <- regression$coefficients[c(2, 3), 4]
interaction_regression <- lm(voxel_vector ~
sex * ageAtScan1 +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion,
data = predictors) %>%
summary()
int_pvals <- interaction_regression$coefficients[dim(interaction_regression$coefficients)[1], 4]
}
pvals <- c(reg_pvals, int_pvals)
return(pvals)
}
# Run
analyze_coupled_images(nifti_dir = file.path(settings$output_dir, "niftis/coupled/global_wcov"),
mask = settings$mask_path,
predictors = predictors,
cores = cores,
is_modality = FALSE)
settings$modalities
library(lobstr)
install.packages(lobstr)
install.packages("lobstr")
library(lobstr)
tracemem(settings$modalities)
obj_addr(settings$modalities)
modality_names = settings$modalities
obj_addr(modality_names)
modality_names = as.character(settings$modalities)
obj_addr(modality_names)
modality_names <- settings$modalities
obj_addr(modality_names)
obj_addr(predictors)
settings$modalities
settings$modalities %>% as.vector
settings$modalities %>% as.vector %>% obj_addr()
test <- settings$modalities
obj_addr(test)
modality_names <- test
obj_addr(modality_names)
?force
modality_names = force(settings$modalities)
obj_addr(modality_names)
pvalbyvoxel_list <- parallel::mclapply(voxel_vector_list,
get_pvals_by_voxel,
predictors = predictors,
modality_names = c("alff", "cbf-basil", "antsCt"),
mc.cores = cores)
pvalbyvoxel_list[[3]]
predictors$averageManualRating
predictors$averageManualRating %>% as.numeric()
predictors$averageManualRating %>% as.vector()
predictors$averageManualRating %>% round
predictors$averageManualRating %>% round(3)
predictors$averageManualRating %>% round(6)
predictors$averageManualRating %>% round(2)
predictors$averageManualRating %>% round(3)
predictors$averageManualRating[1]
predictors$averageManualRating[1] == 2
predictors$averageManualRating[2] == 2
install.packages("Matrix")
install.packages("Matrix")
library(Matrix)
library(Matrix)
rankMatrix(predictors)
library(Matrix)
?rankMatrix
rankMatrix()
Matrix::rankMatrix(as.matrix(predictors))
as.matrix(predictors)
Matrix::rankMatrix(data.matrix(predictors))
qr(data.matrix(predictors))$rank
get_pvals_by_voxel <- function(voxel_vector, predictors, modality_names) {
if (length(voxel_vector) != nrow(predictors)) {
stop("n doesn't match")
}
if ("idemo" %in% modality_names) {
regression <- lm(voxel_vector ~
sex + ageAtScan1 +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion + idemoRelMeanRMSMotion,
data = predictors) %>%
summary()
reg_pvals <- regression$coefficients[c(2, 3), 4]
interaction_regression <- lm(voxel_vector ~
sex * ageAtScan1 +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion + idemoRelMeanRMSMotion,
data = predictors) %>%
summary()
int_pvals <- interaction_regression$coefficients[dim(interaction_regression$coefficients)[1], 4]
} else if ("antsCt" %in% modality_names | "gmd" %in% modality_names) {
regression <- lm(voxel_vector ~
sex + ageAtScan1 +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion + averageManualRating,
data = predictors) %>%
summary()
reg_pvals <- regression$coefficients[c(2, 3), 4]
interaction_regression <- lm(voxel_vector ~
sex * ageAtScan1 +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion,
data = predictors) %>%
summary()
int_pvals <- interaction_regression$coefficients[dim(interaction_regression$coefficients)[1], 4]
} else {
regression <- lm(voxel_vector ~
sex + ageAtScan1 +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion,
data = predictors) %>%
summary()
reg_pvals <- regression$coefficients[c(2, 3), 4]
interaction_regression <- lm(voxel_vector ~
sex * ageAtScan1 +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion,
data = predictors) %>%
summary()
int_pvals <- interaction_regression$coefficients[dim(interaction_regression$coefficients)[1], 4]
}
pvals <- c(reg_pvals, int_pvals)
return(pvals)
}
write_pvals <- function(image_list, mask, dir, is_descriptive, is_modality) {
mask_indices <- which(as.array(mask) > 0)
reference <- extrantsr::check_ants(file.path(dir, list.files(dir)[[1]]))
file_name <- (dir %>% str_split("/"))[[1]]
file_name <- file_name[length(file_name)]
if (is_descriptive) {
descriptive_dir <- file.path(settings$output_dir, "niftis/descriptive")
dir.create(descriptive_dir, showWarnings = FALSE)
names <- c("_mean", "_variance")
for (i in 1:length(image_list)) {
descriptive_image <- make_ants_image(image_list[[i]], mask_indices, reference)
ANTsRCore::antsImageWrite(
descriptive_image,
file.path(descriptive_dir,
paste0(file_name, names[i], ".nii.gz")))
}
return(NULL)
}
if (is_modality) {
pval_output_dir <- file.path(settings$output_dir, "niftis/pvals/modality_raw")
}
else {
pval_output_dir <- file.path(settings$output_dir, "niftis/pvals/raw")
}
for (i in 1:length(image_list)) {
pval_image <- make_ants_image(image_list[[i]], mask_indices, reference)
ANTsRCore::antsImageWrite(
pval_image,
file.path(pval_output_dir,
paste0(file_name, "_pval_", i, ".nii.gz")))
}
return(NULL)
}
analyze_coupled_images <- function(nifti_dir, mask, predictors, cores = 2, is_modality, file_paths = NULL) {
mask <- extrantsr::check_ants(mask)
cat("Loading images\n")
image_vector_list <- load_images(nifti_dir, mask, file_paths)
voxel_vector_list <- transpose_list(image_vector_list)
cat("Making descriptive images\n")
descriptive_list <- make_descriptive_images(voxel_vector_list)
cat("Sending out voxel_vectors!\n")
browser()
pvalbyvoxel_list <- parallel::mclapply(voxel_vector_list,
get_pvals_by_voxel,
predictors = predictors,
modality_names = as.character(settings$modalities),
mc.cores = cores)
# pvalbyvoxel_list <- lapply(voxel_vector_list,
#                            get_pvals_by_voxel,
#                            predictors = predictors)
pvalbycoef_list <- transpose_list(pvalbyvoxel_list)
cat("Writing pvals!\n")
write_pvals(descriptive_list, mask, nifti_dir, is_descriptive = TRUE, is_modality)
write_pvals(pvalbycoef_list, mask, nifti_dir, is_descriptive = FALSE, is_modality)
return(NULL)
}
analyze_coupled_images <- function(nifti_dir, mask, predictors, cores = 2, is_modality, file_paths = NULL) {
mask <- extrantsr::check_ants(mask)
cat("Loading images\n")
image_vector_list <- load_images(nifti_dir, mask, file_paths)
voxel_vector_list <- transpose_list(image_vector_list)
cat("Making descriptive images\n")
descriptive_list <- make_descriptive_images(voxel_vector_list)
cat("Sending out voxel_vectors!\n")
browser()
pvalbyvoxel_list <- parallel::mclapply(voxel_vector_list,
get_pvals_by_voxel,
predictors = predictors,
modality_names = settings$modalities,
mc.cores = cores)
# pvalbyvoxel_list <- lapply(voxel_vector_list,
#                            get_pvals_by_voxel,
#                            predictors = predictors)
pvalbycoef_list <- transpose_list(pvalbyvoxel_list)
cat("Writing pvals!\n")
write_pvals(descriptive_list, mask, nifti_dir, is_descriptive = TRUE, is_modality)
write_pvals(pvalbycoef_list, mask, nifti_dir, is_descriptive = FALSE, is_modality)
return(NULL)
}
# Run
analyze_coupled_images(nifti_dir = file.path(settings$output_dir, "niftis/coupled/global_wcov"),
mask = settings$mask_path,
predictors = predictors,
cores = cores,
is_modality = FALSE)
get_pvals_by_voxel <- function(voxel_vector, predictors, modality_names) {
if (length(voxel_vector) != nrow(predictors)) {
stop("n doesn't match")
}
if ("idemo" %in% modality_names) {
regression <- lm(voxel_vector ~
sex + ageAtScan1 +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion + idemoRelMeanRMSMotion,
data = predictors) %>%
summary()
reg_pvals <- regression$coefficients[c(2, 3), 4]
interaction_regression <- lm(voxel_vector ~
sex * ageAtScan1 +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion + idemoRelMeanRMSMotion,
data = predictors) %>%
summary()
int_pvals <- interaction_regression$coefficients[dim(interaction_regression$coefficients)[1], 4]
} else if ("antsCt" %in% modality_names | "gmd" %in% modality_names) {
regression <- lm(voxel_vector ~
sex + ageAtScan1 +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion,
data = predictors) %>%
summary()
reg_pvals <- regression$coefficients[c(2, 3), 4]
interaction_regression <- lm(voxel_vector ~
sex * ageAtScan1 +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion,
data = predictors) %>%
summary()
int_pvals <- interaction_regression$coefficients[dim(interaction_regression$coefficients)[1], 4]
} else {
regression <- lm(voxel_vector ~
sex + ageAtScan1 +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion,
data = predictors) %>%
summary()
reg_pvals <- regression$coefficients[c(2, 3), 4]
interaction_regression <- lm(voxel_vector ~
sex * ageAtScan1 +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion,
data = predictors) %>%
summary()
int_pvals <- interaction_regression$coefficients[dim(interaction_regression$coefficients)[1], 4]
}
pvals <- c(reg_pvals, int_pvals)
return(pvals)
}
write_pvals <- function(image_list, mask, dir, is_descriptive, is_modality) {
mask_indices <- which(as.array(mask) > 0)
reference <- extrantsr::check_ants(file.path(dir, list.files(dir)[[1]]))
file_name <- (dir %>% str_split("/"))[[1]]
file_name <- file_name[length(file_name)]
if (is_descriptive) {
descriptive_dir <- file.path(settings$output_dir, "niftis/descriptive")
dir.create(descriptive_dir, showWarnings = FALSE)
names <- c("_mean", "_variance")
for (i in 1:length(image_list)) {
descriptive_image <- make_ants_image(image_list[[i]], mask_indices, reference)
ANTsRCore::antsImageWrite(
descriptive_image,
file.path(descriptive_dir,
paste0(file_name, names[i], ".nii.gz")))
}
return(NULL)
}
if (is_modality) {
pval_output_dir <- file.path(settings$output_dir, "niftis/pvals/modality_raw")
}
else {
pval_output_dir <- file.path(settings$output_dir, "niftis/pvals/raw")
}
for (i in 1:length(image_list)) {
pval_image <- make_ants_image(image_list[[i]], mask_indices, reference)
ANTsRCore::antsImageWrite(
pval_image,
file.path(pval_output_dir,
paste0(file_name, "_pval_", i, ".nii.gz")))
}
return(NULL)
}
analyze_coupled_images <- function(nifti_dir, mask, predictors, cores = 2, is_modality, file_paths = NULL) {
mask <- extrantsr::check_ants(mask)
cat("Loading images\n")
image_vector_list <- load_images(nifti_dir, mask, file_paths)
voxel_vector_list <- transpose_list(image_vector_list)
cat("Making descriptive images\n")
descriptive_list <- make_descriptive_images(voxel_vector_list)
cat("Sending out voxel_vectors!\n")
browser()
pvalbyvoxel_list <- parallel::mclapply(voxel_vector_list,
get_pvals_by_voxel,
predictors = predictors,
modality_names = settings$modalities,
mc.cores = cores)
# pvalbyvoxel_list <- lapply(voxel_vector_list,
#                            get_pvals_by_voxel,
#                            predictors = predictors)
pvalbycoef_list <- transpose_list(pvalbyvoxel_list)
cat("Writing pvals!\n")
write_pvals(descriptive_list, mask, nifti_dir, is_descriptive = TRUE, is_modality)
write_pvals(pvalbycoef_list, mask, nifti_dir, is_descriptive = FALSE, is_modality)
return(NULL)
}
# Run
analyze_coupled_images(nifti_dir = file.path(settings$output_dir, "niftis/coupled/global_wcov"),
mask = settings$mask_path,
predictors = predictors,
cores = cores,
is_modality = FALSE)
force(predictors)
