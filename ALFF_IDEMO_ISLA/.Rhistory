if (!is.null(directory_filter)) {
tmp <- tmp %>% filter(directory == directory_filter)
}
if (!is.null(pval_mask_filter)) {
tmp <- tmp %>% filter(pval_mask == pval_mask_filter)
}
if (!is.null(scaling_filter)) {
tmp <- tmp %>% filter(scaling == scaling_filter)
}
if (!is.null(fwhm_filter)) {
tmp <- tmp %>% filter(fwhm == fwhm_filter)
}
if (!is.null(coefficient_filter)) {
tmp <- tmp %>% filter(coefficient == coefficient_filter)
}
if (!is.null(mc_correction_filter)) {
tmp <- tmp %>% filter(mc_correction == mc_correction_filter)
}
if (!is.null(pca_mask_filter)) {
tmp <- tmp %>% filter(pca_mask == pca_mask_filter)
}
print(tmp$prop_sig)
print(tmp$file_path)
file_paths <- tmp$file_paths
if (show_image) {
if (length(file_paths) == 2) {
itksnap(file_paths[1], overlay = file_paths[2], segmentation, verbose = F)
} else {
for (i in 1:length(file_paths)) {
itksnap(file_paths[i], segmentation = segmentation, verbose = F)
}
}
}
return(NULL)
}
get_prop_sig <- function(file_paths, file_labels, atlas, mask) {
pval_masks <- check_ants(file_paths)
mask <- check_ants(mask)
masked_atlas <- atlas * mask
network_ids <- masked_atlas[masked_atlas != 0] %>%
as.factor() %>%
summary() %>%
names()
common_mask <- atlas * mask
common_mask[common_mask != 0] <- 1
sig_voxel_images <- lapply(pval_masks, function(pval_mask) pval_mask * masked_atlas)
nonsig_voxel_images <- lapply(pval_masks, function(pval_mask) (-pval_mask + 1) * masked_atlas)
for (i in 1:4) {
sig_sum <- sum(sig_voxel_images[[i]] != 0)
nonsig_sum <- sum(nonsig_voxel_images[[i]] != 0)
if (sum(common_mask) != nonsig_sum + sig_sum) {
stop()
}
}
summaries <- mapply(
function(sig_voxel_image, nonsig_voxel_image, file_label, network_id) {
sig_summary <- sig_voxel_image[sig_voxel_image != 0] %>%
as.factor() %>%
summary() %>%
as.data.frame() %>%
rownames_to_column() %>%
rename(sig_counts = ".")
nonsig_summary <- nonsig_voxel_image[nonsig_voxel_image != 0] %>%
as.factor() %>%
summary() %>%
as.data.frame() %>%
rownames_to_column() %>%
rename(nonsig_counts = ".")
map_name <- rep(file_label, length(network_ids))
df <- data.frame(network_ids) %>%
cbind(map_name) %>%
left_join(sig_summary, by = c("network_ids" = "rowname")) %>%
left_join(nonsig_summary, by = c("network_ids" = "rowname"))
return(df)
},
sig_voxel_images, nonsig_voxel_images, file_labels,
MoreArgs = list(network_ids),
SIMPLIFY = FALSE)
summaries_df <- bind_rows(summaries) %>%
mutate(proportion = sig_counts / (sig_counts + nonsig_counts),
se = sqrt(proportion * (1 - proportion) / (sig_counts + nonsig_counts))
)
return(summaries_df)
}
pvals_dir <- file.path(settings$output_dir, "niftis/pvals")
pval_metadata <- read_csv(file.path(settings$output_dir, "csvs", "pval_descriptive_stats.csv"))
yeo7 <- file.path(settings$input_dir, "references/atlases/7yeonetworkPNC.nii.gz") %>% check_ants()
aal <- file.path(settings$input_dir, "references/atlases/AAL_atlas_PNC.nii.gz") %>% check_ants()
# transform aal to yeo7-style mask
aal_sym <- floor(aal/10) * 10
all_indices <- unique(aal_sym)
subcortical_indices <- c(4100, 4200, 7000, 7010, 7020, 7100) # What are the subcortical structures?
excluded_indices <- all_indices[!all_indices %in% subcortical_indices]
for(i in 1:length(excluded_indices)) {
aal_sym[aal_sym == excluded_indices[i]] <- 0
}
file_labels <- c("global_age", "global_sex", "unscaled_age", "unscaled_sex")
# get file paths
file_paths <- pval_metadata %>%
filter(coefficient == "sex" | coefficient == "age",
mc_correction == "fdr05") %>%
pull(file_paths)
yeo7_df <- get_prop_sig(file_paths, file_labels, yeo7, settings$mask_path)
yeo7_barplot <- ggplot(yeo7_df, aes(network_ids, proportion)) +
geom_col() +
geom_errorbar(aes(ymin = proportion - se, ymax = proportion + se), width = .2,
position = position_dodge(.9)) +
facet_wrap(~ map_name) +
labs(title = "PCA on Yeo7") +
scale_x_discrete(labels = c("Visual", "Somatomotor", "Dorsal Attention", "Ventral Attention", "Limbic", "Frontoparietal", "Default")) +
theme_classic() +
theme(axis.text.x = element_text(angle = 90)); yeo7_barplot
ggsave(plot = yeo7_barplot, file.path(settings$output_dir, "figures", "yeo7_pval-prop_fdr05.png"), type = "cairo-png")
write_pvals <- function(image_list, mask, dir, is_descriptive = FALSE, is_modality = FALSE) {
mask_indices <- which(as.array(mask) > 0)
reference <- extrantsr::check_ants(file.path(dir, list.files(dir)[[1]]))
file_name <- (dir %>% str_split("/"))[[1]]
file_name <- file_name[length(file_name)]
if (is_descriptive) {
descriptive_dir <- file.path(settings$output_dir, "niftis/descriptive")
dir.create(descriptive_dir, showWarnings = FALSE)
names <- c("_mean", "_variance")
for (i in 1:length(image_list)) {
descriptive_image <- make_ants_image(image_list[[i]], mask_indices, reference)
ANTsRCore::antsImageWrite(
descriptive_image,
file.path(descriptive_dir,
paste0(file_name, names[i], ".nii.gz")))
}
return(NULL)
}
if (is_modality)
pval_output_dir <- file.path(settings$output_dir, "niftis/pvals/modality")
else
pval_output_dir <- file.path(settings$output_dir, "niftis/pvals/raw")
for (i in 1:length(image_list)) {
pval_image <- make_ants_image(image_list[[i]], mask_indices, reference)
ANTsRCore::antsImageWrite(
pval_image,
file.path(pval_output_dir,
paste0(file_name, "_pval_", i, ".nii.gz")))
}
return(NULL)
}
nifti_dir <- here("..")
nifti_dir
nifti_dir <- here("../input/niftis")
settings <- list(input_filepaths_path = file.path(input_dir, "csvs/input_filepaths.csv"),
output_dir = output_dir,
input_dir = input_dir,
nifti_dir = nifti_dir,
batch_script_dir = batch_script_dir,
mask_path = mask_path,
fwhm = fwhm,
propMiss = propMiss)
output_dir <- here("output") #base directory for all outputs
input_dir <- here("input") #base directory for all inputs
nifti_dir <- here("../input/niftis")
mask_path <- file.path(input_dir, "references/masks/gm10_pcals_rest.nii.gz")
batch_script_dir <- here("R/batch_scripts")
fwhm <- 3
propMiss <- 0.9
settings <- list(input_filepaths_path = file.path(input_dir, "csvs/input_filepaths.csv"),
output_dir = output_dir,
input_dir = input_dir,
nifti_dir = nifti_dir,
batch_script_dir = batch_script_dir,
mask_path = mask_path,
fwhm = fwhm,
propMiss = propMiss)
input_filepaths <- read_csv(file.path(input_dir, "csvs/input_filepaths.csv"))
save(settings, file = file.path(input_dir, "csvs/settings.RData"))
rm(output_dir, input_dir, mask_path, batch_script_dir, fwhm, propMiss)
analyze_coupled_images <- function(nifti_dir, mask, predictors, cores = 2, is_modality = FALSE) {
mask <- extrantsr::check_ants(mask)
image_vector_list <- load_images(nifti_dir, mask)
voxel_vector_list <- transpose_list(image_vector_list)
descriptive_list <- make_descriptive_images(voxel_vector_list)
pvalbyvoxel_list <- parallel::mclapply(voxel_vector_list,
get_pvals_by_voxel,
predictors = predictors,
mc.cores = cores)
pvalbycoef_list <- transpose_list(pvalbyvoxel_list)
write_pvals(descriptive_list, mask, nifti_dir, is_descriptive = TRUE, is_modality)
write_pvals(pvalbycoef_list, mask, nifti_dir, is_modality)
return(NULL)
}
analyze_coupled_images(nifti_dir = file.path(settings$nifti_dir, "alff"),
mask = settings$mask_path,
predictors = predictors,
cores = 16,
is_modality = TRUE)
load_images <- function(dir, mask) {
files <- list.files(dir)
file_paths <- file.path(dir, files)
image_vector_list <- lapply(file_paths,
function(x, mask) {
image <- extrantsr::check_ants(x)
image[mask == 0] <- NA
image_vector <- image %>% as.numeric()
image_vector_no_NAs <- image_vector[!is.na(image_vector)]
return(image_vector_no_NAs)
},
mask = mask
)
return(image_vector_list)
}
transpose_list <- function(list) {
matrix <- list %>%
unlist() %>%
matrix(byrow = TRUE, nrow = length(list))
transposed_list <- lapply(seq_len(ncol(matrix)), function(i) matrix[, i])
return(transposed_list)
}
make_descriptive_images <- function(voxel_vector_list) {
descriptive_vector <- lapply(voxel_vector_list, function(voxel_vector) {
voxel_mean <- sum(voxel_vector)/length(voxel_vector)
voxel_variance <- var(voxel_vector)
return(c(voxel_mean, voxel_variance))
}) %>% unlist()
voxel_mean_vector <- descriptive_vector[c(T, F)]
voxel_variance_vector <- descriptive_vector[c(F, T)]
return(list(voxel_mean_vector, voxel_variance_vector))
}
get_pvals_by_voxel <- function(voxel_vector, predictors) {
if (length(voxel_vector) != nrow(predictors)) {
stop("n doesn't match")
}
regression <- lm(voxel_vector ~
sex + ageAtScan1 +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion,
data = predictors) %>%
summary()
reg_pvals <- regression$coefficients[c(2, 3), 4]
interaction_regression <- lm(voxel_vector ~
sex * ageAtScan1 +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion,
data = predictors) %>%
summary()
int_pvals <- interaction_regression$coefficients[8, 4]
pvals <- c(reg_pvals, int_pvals)
return(pvals)
}
write_pvals <- function(image_list, mask, dir, is_descriptive = FALSE, is_modality = FALSE) {
mask_indices <- which(as.array(mask) > 0)
reference <- extrantsr::check_ants(file.path(dir, list.files(dir)[[1]]))
file_name <- (dir %>% str_split("/"))[[1]]
file_name <- file_name[length(file_name)]
if (is_descriptive) {
descriptive_dir <- file.path(settings$output_dir, "niftis/descriptive")
dir.create(descriptive_dir, showWarnings = FALSE)
names <- c("_mean", "_variance")
for (i in 1:length(image_list)) {
descriptive_image <- make_ants_image(image_list[[i]], mask_indices, reference)
ANTsRCore::antsImageWrite(
descriptive_image,
file.path(descriptive_dir,
paste0(file_name, names[i], ".nii.gz")))
}
return(NULL)
}
if (is_modality)
pval_output_dir <- file.path(settings$output_dir, "niftis/pvals/modality")
else
pval_output_dir <- file.path(settings$output_dir, "niftis/pvals/raw")
for (i in 1:length(image_list)) {
pval_image <- make_ants_image(image_list[[i]], mask_indices, reference)
ANTsRCore::antsImageWrite(
pval_image,
file.path(pval_output_dir,
paste0(file_name, "_pval_", i, ".nii.gz")))
}
return(NULL)
}
analyze_coupled_images <- function(nifti_dir, mask, predictors, cores = 2, is_modality = FALSE) {
mask <- extrantsr::check_ants(mask)
image_vector_list <- load_images(nifti_dir, mask)
voxel_vector_list <- transpose_list(image_vector_list)
descriptive_list <- make_descriptive_images(voxel_vector_list)
pvalbyvoxel_list <- parallel::mclapply(voxel_vector_list,
get_pvals_by_voxel,
predictors = predictors,
mc.cores = cores)
pvalbycoef_list <- transpose_list(pvalbyvoxel_list)
write_pvals(descriptive_list, mask, nifti_dir, is_descriptive = TRUE, is_modality)
write_pvals(pvalbycoef_list, mask, nifti_dir, is_modality)
return(NULL)
}
analyze_coupled_images(nifti_dir = file.path(settings$nifti_dir, "alff"),
mask = settings$mask_path,
predictors = predictors,
cores = 16,
is_modality = TRUE)
nifti_dir <- here("../input/niftis")
nifti_dir
nifti_dir <- here()
nifti_dir <- here("../input/niftis")
nifti_dir <- here("../input/niftis")
nifti_dir <- here()
nifti_dir
nifti_dir <- "~/Documents/IMCo_analyses/input/niftis"
output_dir <- here("output") #base directory for all outputs
input_dir <- here("input") #base directory for all inputs
nifti_dir <- "~/Documents/IMCo_analyses/input/niftis"
mask_path <- file.path(input_dir, "references/masks/gm10_pcals_rest.nii.gz")
batch_script_dir <- here("R/batch_scripts")
fwhm <- 3
propMiss <- 0.9
settings <- list(input_filepaths_path = file.path(input_dir, "csvs/input_filepaths.csv"),
output_dir = output_dir,
input_dir = input_dir,
nifti_dir = nifti_dir,
batch_script_dir = batch_script_dir,
mask_path = mask_path,
fwhm = fwhm,
propMiss = propMiss)
input_filepaths <- read_csv(file.path(input_dir, "csvs/input_filepaths.csv"))
save(settings, file = file.path(input_dir, "csvs/settings.RData"))
rm(output_dir, input_dir, mask_path, batch_script_dir, fwhm, propMiss)
analyze_coupled_images(nifti_dir = file.path(settings$nifti_dir, "alff"),
mask = settings$mask_path,
predictors = predictors,
cores = 16,
is_modality = TRUE)
analyze_coupled_images(nifti_dir = file.path(settings$nifti_dir, "alff"),
mask = settings$mask_path,
predictors = predictors,
cores = 16,
is_modality = TRUE)
q
q
q()
undebug(analyze_coupled_images)
q
nifti_dir
file.path(settings$nifti_dir, "alff")
browser()
analyze_coupled_images(nifti_dir = file.path(settings$nifti_dir, "alff"),
mask = settings$mask_path,
predictors = predictors,
cores = 16,
is_modality = TRUE)
?debugonce
browser()
analyze_coupled_images(nifti_dir = file.path(settings$nifti_dir, "alff"),
mask = settings$mask_path,
predictors = predictors,
cores = 16,
is_modality = TRUE)
gc()
debugonce(analyze_coupled_images(nifti_dir = file.path(settings$nifti_dir, "alff"),
mask = settings$mask_path,
predictors = predictors,
cores = 16,
is_modality = TRUE))
load_images <- function(dir, mask) {
files <- list.files(dir)
file_paths <- file.path(dir, files)
image_vector_list <- lapply(file_paths,
function(x, mask) {
image <- extrantsr::check_ants(x)
image[mask == 0] <- NA
image_vector <- image %>% as.numeric()
image_vector_no_NAs <- image_vector[!is.na(image_vector)]
return(image_vector_no_NAs)
},
mask = mask
)
return(image_vector_list)
}
transpose_list <- function(list) {
matrix <- list %>%
unlist() %>%
matrix(byrow = TRUE, nrow = length(list))
transposed_list <- lapply(seq_len(ncol(matrix)), function(i) matrix[, i])
return(transposed_list)
}
make_descriptive_images <- function(voxel_vector_list) {
descriptive_vector <- lapply(voxel_vector_list, function(voxel_vector) {
voxel_mean <- sum(voxel_vector)/length(voxel_vector)
voxel_variance <- var(voxel_vector)
return(c(voxel_mean, voxel_variance))
}) %>% unlist()
voxel_mean_vector <- descriptive_vector[c(T, F)]
voxel_variance_vector <- descriptive_vector[c(F, T)]
return(list(voxel_mean_vector, voxel_variance_vector))
}
get_pvals_by_voxel <- function(voxel_vector, predictors) {
if (length(voxel_vector) != nrow(predictors)) {
stop("n doesn't match")
}
regression <- lm(voxel_vector ~
sex + ageAtScan1 +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion,
data = predictors) %>%
summary()
reg_pvals <- regression$coefficients[c(2, 3), 4]
interaction_regression <- lm(voxel_vector ~
sex * ageAtScan1 +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion,
data = predictors) %>%
summary()
int_pvals <- interaction_regression$coefficients[8, 4]
pvals <- c(reg_pvals, int_pvals)
return(pvals)
}
write_pvals <- function(image_list, mask, dir, is_descriptive = FALSE, is_modality = FALSE) {
mask_indices <- which(as.array(mask) > 0)
reference <- extrantsr::check_ants(file.path(dir, list.files(dir)[[1]]))
file_name <- (dir %>% str_split("/"))[[1]]
file_name <- file_name[length(file_name)]
if (is_descriptive) {
descriptive_dir <- file.path(settings$output_dir, "niftis/descriptive")
dir.create(descriptive_dir, showWarnings = FALSE)
names <- c("_mean", "_variance")
for (i in 1:length(image_list)) {
descriptive_image <- make_ants_image(image_list[[i]], mask_indices, reference)
ANTsRCore::antsImageWrite(
descriptive_image,
file.path(descriptive_dir,
paste0(file_name, names[i], ".nii.gz")))
}
return(NULL)
}
if (is_modality)
pval_output_dir <- file.path(settings$output_dir, "niftis/pvals/modality")
else
pval_output_dir <- file.path(settings$output_dir, "niftis/pvals/raw")
for (i in 1:length(image_list)) {
pval_image <- make_ants_image(image_list[[i]], mask_indices, reference)
ANTsRCore::antsImageWrite(
pval_image,
file.path(pval_output_dir,
paste0(file_name, "_pval_", i, ".nii.gz")))
}
return(NULL)
}
analyze_coupled_images <- function(nifti_dir, mask, predictors, cores = 2, is_modality = FALSE) {
mask <- extrantsr::check_ants(mask)
image_vector_list <- load_images(nifti_dir, mask)
voxel_vector_list <- transpose_list(image_vector_list)
descriptive_list <- make_descriptive_images(voxel_vector_list)
pvalbyvoxel_list <- parallel::mclapply(voxel_vector_list,
get_pvals_by_voxel,
predictors = predictors,
mc.cores = cores)
pvalbycoef_list <- transpose_list(pvalbyvoxel_list)
write_pvals(descriptive_list, mask, nifti_dir, is_descriptive = TRUE, is_modality)
write_pvals(pvalbycoef_list, mask, nifti_dir, is_modality)
return(NULL)
}
debugonce(analyze_coupled_images(nifti_dir = file.path(settings$nifti_dir, "alff"),
mask = settings$mask_path,
predictors = predictors,
cores = 16,
is_modality = TRUE))
debugonce(analyze_coupled_images(nifti_dir = file.path(settings$nifti_dir, "alff"),
mask = settings$mask_path,
predictors = predictors,
cores = 16,
is_modality = TRUE))
browser()
ls
:
analyze_coupled_images <- function(nifti_dir, mask, predictors, cores = 2, is_modality = FALSE) {
browser()
print("hello")
mask <- extrantsr::check_ants(mask)
image_vector_list <- load_images(nifti_dir, mask)
voxel_vector_list <- transpose_list(image_vector_list)
descriptive_list <- make_descriptive_images(voxel_vector_list)
pvalbyvoxel_list <- parallel::mclapply(voxel_vector_list,
get_pvals_by_voxel,
predictors = predictors,
mc.cores = cores)
pvalbycoef_list <- transpose_list(pvalbyvoxel_list)
write_pvals(descriptive_list, mask, nifti_dir, is_descriptive = TRUE, is_modality)
write_pvals(pvalbycoef_list, mask, nifti_dir, is_modality)
return(NULL)
}
analyze_coupled_images(nifti_dir = file.path(settings$nifti_dir, "alff"),
mask = settings$mask_path,
predictors = predictors,
cores = 16,
is_modality = TRUE)
ls
ls()
ls()
is_modality
mask
nifti_dir
image_vector_list %>% length()
list.files(nifti_dir) %>% length()
image_vector_list[[1]]
image_vector_list[[1]] %>% length()
ls
ls()
length(voxel_vector_list)
length(voxel_vector_list[[1]])
ls()
length(desc())
length(descriptive_list)
length(descriptive_list[[1]])
voxel_vector_list[[1]]
ls()
predictors
analyze_coupled_images(nifti_dir = file.path(settings$output_dir, "niftis/coupled/unscaled_wcor"),
mask = settings$mask_path,
predictors = predictors,
cores = 16)
ls()
dim(predictors)
