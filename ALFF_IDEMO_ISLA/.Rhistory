# map_type <- c(rep("region", nrow(region_sphere)), rep("pval", nrow(pval_sphere)))
# paths_df <- region_sphere %>%
#   rbind(pval_sphere) %>%
#   mutate(map_type = map_type)
#
# write_csv(paths_df, file.path(fs_images_dir, "paths_to_surfaces.csv"))
# paths_df
}
Sys.setenv(FS_LICENSE="/home/fengling/software/freesurfer/license.txt")
pval_paths <- read_csv(file.path(settings$output_dir, "csvs/pval_descriptive_stats.csv")) %>%
filter(mc_correction == "fdr05") %>%
pull(file_paths) %>%
as.list()
fs_images_dir <- file.path(settings$output_dir, "freesurfer_images")
View(pval_paths)
pval_paths
list.files()
list.files(full.names = TRUE)
list.files(file.path(settings$output_dir, "niftis/descriptive"),
full.names = TRUE)
pval_paths
?list.files
list.files(file.path(settings$output_dir, "niftis/descriptive"),
full.names = TRUE) %>% as.list()
preprocess_for_spin_test(file_paths = list.files(file.path(settings$output_dir, "niftis/descriptive"),
full.names = TRUE) %>% as.list(),
fs_images_dir = fs_images_dir,
file_path_output_dir = "descriptive")
?antsAverageImages
Sys.setenv(FS_LICENSE="/home/fengling/software/freesurfer/license.txt")
n
bash_file <- rep(0, nrow(input_filepaths))
for(i in 1:nrow(input_filepaths)) {
line <- input_filepaths[i, ]
out_name <- line[1]
subject_files <- paste(line[1, 2], line[1, 3], line[1, 4], sep = ",")
bsub_args <- paste("bsub",
"-q taki_normal",
paste("-J", shQuote("intermodal_coupling")),
paste("-R", shQuote("rusage[mem=4000]")),
"-M 10000",
paste("-o", file.path(settings$output_dir, "stdout/intermodal_coupling.txt")))
Rscript_args <- paste("Rscript", file.path(settings$batch_script_dir, "01_perform_imco.R"),
subject_files,
settings$mask_path,
settings$output_dir,
out_name,
settings$fwhm,
settings$prop_miss)
bash_file[i] <- paste(bsub_args, Rscript_args)
}
write_lines(bash_file, file.path(settings$batch_script_dir, "01_commands.sh"))
#TORUNOTHER here("R/batch_scripts/01_commands.sh") on login node
#TOCOPY
#Make sure to move 01_perform_imco.R into new directory
rm(bash_file, i, line, out_name, subject_files, bsub_args, Rscript_args)
#TORUNOTHER here("R/batch_scripts/02_calculate_pvals.R) on interactive server
#TOCOPY
#Make sure to move 02_calculate_pvals.R into new directory and change #TOCHANGE
#TODO add idemoRelMeanRMSMotion to predictors and then to 02_calculate_pvals
#TORUNOTHER here("R/batch_scripts/02_calculate_pvals.R) on interactive server
#TOCOPY
#Make sure to move 02_calculate_pvals.R into new directory and change #TOCHANGE
#TODO add idemoRelMeanRMSMotion to predictors and then to 02_calculate_pvals
source(here("R/mri_vol2surf.R"))
split_atlas_into_regions <- function(atlas, atlas_name = c("yeo7", "aal"), region_out_dir) {
dir.create(region_out_dir, showWarnings = FALSE)
atlas[atlas == 0] <- NA
region_names <- atlas %>%
as.factor() %>%
summary() %>%
names()
region_names <- region_names[-length(region_names)]
out_file_names <- region_names %>%
paste0(atlas_name, "_", ., ".nii.gz") %>%
file.path(region_out_dir, .)
mapply(
function(region_name, out_file_name) {
temp <- atlas * 1 # causes R to make a copy of atlas at a new address
temp[atlas == region_name] <- 1
temp[atlas != region_name] <- 0
antsImageWrite(temp, out_file_name)
}, as.numeric(region_names),
out_file_names)
return(out_file_names)
}
get_names <- function(paths) {
names_list <- lapply(paths, function(path) {
split_path <- str_split(path, "/") %>%
unlist()
file_name <- split_path[length(split_path)]
})
unlist(names_list)
}
transform_to_MNI <- function(images, paths, MNI_transform_out_dir) {
MNI <- check_ants(file.path(settings$input_dir, "references/atlases/MNI152_T1_1mm_brain.nii.gz"))
transform_list <- c(file.path(settings$input_dir, "transformations/PNC-MNI_0Warp.nii.gz"),
file.path(settings$input_dir, "transformations/PNC-MNI_1Affine.mat"))
file_names <- get_names(paths)
mapply(function(image, file_name, MNI, transform_list) {
image_transformed <- antsApplyTransforms(fixed = MNI,
moving = image,
transformlist = transform_list,
interpolator = "nearestNeighbor",
imagetype = 0)
antsImageWrite(image_transformed, file.path(MNI_transform_out_dir, file_name))
return(file.path(MNI_transform_out_dir, file_name))
}, image = images, file_name = file_names,
MoreArgs = list(MNI = MNI, transform_list = transform_list))
}
project_to_surface <- function(image_MNI_paths, out_dir) {
dir.create(out_dir, showWarnings = FALSE)
hemi_paths <- lapply(image_MNI_paths, function(image_path) {
outfile = get_names(image_path)
lh <- mri_vol2surf(mov = image_path,
target_subject = 'fsaverage',
opts = "--interp nearest",
outfile = file.path(out_dir, outfile),
hemi = "lh")
rh <- mri_vol2surf(mov = image_path,
target_subject = 'fsaverage',
opts = "--interp nearest",
outfile = file.path(out_dir, outfile),
hemi = "rh")
c(file.path(lh), file.path(rh))
})
num_files <- length(hemi_paths)
paths_df <- hemi_paths %>%
unlist() %>%
matrix(byrow = TRUE, ncol = 1) %>%
as.data.frame() %>%
rename(paths = "V1") %>%
mutate(hemisphere = rep(c("lh", "rh"), num_files))
paths_df
}
preprocess_for_spin_test <- function(file_paths = NULL, atlas_name = c("", "yeo7", "aal"),
fs_images_dir,
file_path_output_dir = "") {
if (is.null(file_paths)) {
if (atlas_name == "yeo7") {
atlas <- check_ants(file.path(settings$input_dir, "references/atlases/7yeonetworkPNC.nii.gz"))
atlas_output_dir <- "yeo7_regions"
}
if (atlas_name == "aal") {
atlas <- check_ants(file.path(settings$input_dir, "references/atlases/AAL_atlas_PNC.nii.gz"))
atlas_output_dir <- "aal_regions"
for(i in 0:9) {
lower <- i * 1000
upper <- (i + 1) * 1000
atlas[atlas >= lower & atlas < upper] <- lower
}
}
region_paths <- split_atlas_into_regions(atlas,
atlas_name = atlas_name,
file.path(fs_images_dir, "PNC_space", atlas_output_dir))
region_images <- check_ants(region_paths)
region_transformed_paths <- transform_to_MNI(region_images,
region_paths,
file.path(fs_images_dir, "MNI_space", atlas_output_dir))
region_sphere <- project_to_surface(region_transformed_paths,
file.path(fs_images_dir, "surfaces", atlas_output_dir))
return(NULL)
}
if (!is.null(file_paths)) {
pval_images <- check_ants(file_paths)
pval_transformed_paths <- transform_to_MNI(pval_images,
file_paths,
file.path(fs_images_dir, "MNI_space", file_path_output_dir))
pval_sphere <- project_to_surface(pval_transformed_paths,
file.path(fs_images_dir, "surfaces", file_path_output_dir))
return(NULL)
}
}
Sys.setenv(FS_LICENSE="/home/fengling/software/freesurfer/license.txt")
pval_paths <- read_csv(file.path(settings$output_dir, "csvs/pval_descriptive_stats.csv")) %>%
filter(mc_correction == "fdr05") %>%
pull(file_paths) %>%
as.list()
View(pval_paths)
pval_paths <- read_csv(file.path(settings$output_dir, "csvs/pval_descriptive_stats.csv"))# %>%
View(pval_paths)
pval_paths <- read_csv(file.path(settings$output_dir, "csvs/pval_descriptive_stats.csv")) %>%
filter(mc_correction == "fdr05") %>%
pull(file_paths) %>%
as.list()
pval_paths
pval_descriptive <- read_csv(file.path(settings$output_dir, "csvs/pval_descriptive_stats.csv"))
View(pval_descriptive)
Sys.setenv(FS_LICENSE="/home/fengling/software/freesurfer/license.txt")
pval_descriptive <- read_csv(file.path(settings$output_dir, "csvs/pval_descriptive_stats.csv"))
pval_coupling_paths <- pval_descriptive %>%
filter(mc_correction == "fdr05",
matrix_type != modality) %>%
pull(file_paths) %>%
as.list()
pval_modality_paths <- pval_descriptive %>%
filter(mc_correction == "fdr05",
matrix_type == modality) %>%
pull(file_paths) %>%
as.list()
pval_coupling_paths <- pval_descriptive %>%
filter(mc_correction == "fdr05",
matrix_type != "modality") %>%
pull(file_paths) %>%
as.list()
pval_modality_paths <- pval_descriptive %>%
filter(mc_correction == "fdr05",
matrix_type == "modality") %>%
pull(file_paths) %>%
as.list()
pval_coupling_paths
pval_modality_paths
fs_images_dir <- file.path(settings$output_dir, "freesurfer_images")
preprocess_for_spin_test(file_paths = pval_modality_paths,
fs_images_dir = fs_images_dir,
file_path_output_dir = "pvals/modality")
warnings
warnings()
get_prop_sig <- function(file_paths, file_labels, atlas, mask) {
pval_masks <- check_ants(file_paths)
mask <- check_ants(mask)
masked_atlas <- atlas * mask
network_ids <- masked_atlas[masked_atlas != 0] %>%
as.factor() %>%
summary() %>%
names()
common_mask <- atlas * mask
common_mask[common_mask != 0] <- 1
sig_voxel_images <- lapply(pval_masks, function(pval_mask) pval_mask * masked_atlas)
nonsig_voxel_images <- lapply(pval_masks, function(pval_mask) (-pval_mask + 1) * masked_atlas)
for (i in 1:4) {
sig_sum <- sum(sig_voxel_images[[i]] != 0)
nonsig_sum <- sum(nonsig_voxel_images[[i]] != 0)
if (sum(common_mask) != nonsig_sum + sig_sum) {
stop()
}
}
summaries <- mapply(
function(sig_voxel_image, nonsig_voxel_image, file_label, network_id) {
sig_summary <- sig_voxel_image[sig_voxel_image != 0] %>%
as.factor() %>%
summary() %>%
as.data.frame() %>%
rownames_to_column() %>%
rename(sig_counts = ".")
nonsig_summary <- nonsig_voxel_image[nonsig_voxel_image != 0] %>%
as.factor() %>%
summary() %>%
as.data.frame() %>%
rownames_to_column() %>%
rename(nonsig_counts = ".")
map_name <- rep(file_label, length(network_ids))
df <- data.frame(network_ids) %>%
cbind(map_name) %>%
left_join(sig_summary, by = c("network_ids" = "rowname")) %>%
left_join(nonsig_summary, by = c("network_ids" = "rowname"))
return(df)
},
sig_voxel_images, nonsig_voxel_images, file_labels,
MoreArgs = list(network_ids),
SIMPLIFY = FALSE)
summaries_df <- bind_rows(summaries) %>%
mutate(proportion = sig_counts / (sig_counts + nonsig_counts),
se = sqrt(proportion * (1 - proportion) / (sig_counts + nonsig_counts))
)
return(summaries_df)
}
pval_metadata <- read_csv(file.path(settings$output_dir, "csvs", "pval_descriptive_stats.csv"))
yeo7 <- file.path(settings$input_dir, "references/atlases/7yeonetworkPNC.nii.gz") %>% check_ants()
aal <- file.path(settings$input_dir, "references/atlases/AAL_atlas_PNC.nii.gz") %>% check_ants()
# transform aal to lower resolution
aal_sym <- floor(aal/10) * 10
all_indices <- unique(aal_sym)
subcortical_indices <- c(4100, 4200, 7000, 7010, 7020, 7100) #select subcortical regions
excluded_indices <- all_indices[!all_indices %in% subcortical_indices]
for(i in 1:length(excluded_indices)) {
aal_sym[aal_sym == excluded_indices[i]] <- 0
}
# get file paths
coupled_file_paths <- pval_metadata %>%
filter(matrix_type != "modality",
coefficient == "sex" | coefficient == "age",
mc_correction == "fdr05") %>%
pull(file_paths)
file_labels <- c("global_age", "global_sex", "unscaled_age", "unscaled_sex")
#Coupled data on Yeo7
coupled_yeo7 <- get_prop_sig(coupled_file_paths, file_labels, yeo7, settings$mask_path)
coupled_yeo7_barplot <- ggplot(coupled_yeo7, aes(network_ids, proportion)) +
geom_col() +
geom_errorbar(aes(ymin = proportion - se, ymax = proportion + se), width = .2,
position = position_dodge(.9)) +
facet_wrap(~ map_name) +
labs(title = "Coupled on Yeo7") +
scale_x_discrete(labels = c("Visual", "Somatomotor", "Dorsal Attention", "Ventral Attention", "Limbic", "Frontoparietal", "Default")) +
theme_classic() +
theme(axis.text.x = element_text(angle = 90)); coupled_yeo7_barplot
ggsave(plot = coupled_yeo7_barplot, file.path(settings$output_dir, "figures", "yeo7_pval-prop_fdr05.png"), type = "cairo-png")
#Coupled data on AAL
coupled_aal <- get_prop_sig(coupled_file_paths, file_labels, aal_sym, settings$mask_path)
coupled_aal_barplot <- ggplot(coupled_aal, aes(network_ids, proportion)) +
geom_col() +
geom_errorbar(aes(ymin = proportion - se, ymax = proportion + se), width = .2,
position = position_dodge(.9)) +
facet_wrap(~ map_name) +
labs(title = "Coupled on AAL") +
scale_x_discrete(labels = c("Hippocampus", "Amygdala", "Caudate", "Putamen", "Pallidum", "Thalamus")) +
theme_classic() +
theme(axis.text.x = element_text(angle = 90)); coupled_aal_barplot
ggsave(plot = coupled_aal_barplot, file.path(settings$output_dir, "figures", "aal_pval-prop_fdr05.png"), type = "cairo-png")
###############################
# Adjusted Modality maps
modality_file_paths <- pval_metadata %>%
filter(matrix_type == "modality",
coefficient == "sex" | coefficient == "age",
mc_correction == "fdr05") %>%
pull(file_paths)
file_labels <- c("alff_age", "alff_sex", "cbf-isla_age", "cbf-isla_sex", "idemo_age", "idemo_sex") #TOCHANGE
# Modality data on Yeo7
modality_yeo7 <- get_prop_sig(file_paths = modality_file_paths,
file_labels = file_labels,
atlas = yeo7,
mask = settings$mask_path) #TODO
modality_yeo7_barplot <- ggplot(modality_yeo7, aes(network_ids, proportion)) +
geom_col() +
geom_errorbar(aes(ymin = proportion - se, ymax = proportion + se), width = .2,
position = position_dodge(.9)) +
facet_wrap(~ map_name) +
labs(title = "modality on Yeo7") +
scale_x_discrete(labels = c("Visual", "Somatomotor", "Dorsal Attention", "Ventral Attention", "Limbic", "Frontoparietal", "Default")) +
theme_classic() +
theme(axis.text.x = element_text(angle = 90)); modality_yeo7_barplot
ggsave(plot = modality_yeo7_barplot, file.path(settings$output_dir, "figures", "yeo7_modality_fdr05.png"), type = "cairo-png")
# Modality data on AAL
modality_aal <- get_prop_sig(modality_file_paths, file_labels, aal_sym, settings$mask_path)
modality_aal_barplot <- ggplot(modality_aal, aes(network_ids, proportion)) +
geom_col() +
geom_errorbar(aes(ymin = proportion - se, ymax = proportion + se), width = .2,
position = position_dodge(.9)) +
facet_wrap(~ map_name) +
labs(title = "modality on AAL") +
scale_x_discrete(labels = c("Hippocampus", "Amygdala", "Caudate", "Putamen", "Pallidum", "Thalamus")) +
theme_classic() +
theme(axis.text.x = element_text(angle = 90)); modality_aal_barplot
ggsave(plot = modality_aal_barplot, file.path(settings$output_dir, "figures", "aal_modality_fdr05.png"), type = "cairo-png")
View(input_filepaths)
View(predictors)
98/12
276/12
pval_metadata <- read_csv(file.path(settings$output_dir, "csvs", "pval_descriptive_stats.csv"))
yeo7 <- file.path(settings$input_dir, "references/atlases/7yeonetworkPNC.nii.gz") %>% check_ants()
aal <- file.path(settings$input_dir, "references/atlases/AAL_atlas_PNC.nii.gz") %>% check_ants()
# transform aal to lower resolution
aal_sym <- floor(aal/10) * 10
all_indices <- unique(aal_sym)
subcortical_indices <- c(4100, 4200, 7000, 7010, 7020, 7100) #select subcortical regions
excluded_indices <- all_indices[!all_indices %in% subcortical_indices]
for(i in 1:length(excluded_indices)) {
aal_sym[aal_sym == excluded_indices[i]] <- 0
}
# get file paths
coupled_file_paths <- pval_metadata %>%
filter(matrix_type != "modality",
coefficient == "sex" | coefficient == "age",
mc_correction == "fdr05") %>%
pull(file_paths)
file_labels <- c("global_age", "global_sex", "unscaled_age", "unscaled_sex")
#Coupled data on Yeo7
coupled_yeo7 <- get_prop_sig(coupled_file_paths, file_labels, yeo7, settings$mask_path)
coupled_yeo7_barplot <- ggplot(coupled_yeo7, aes(network_ids, proportion)) +
geom_col() +
geom_errorbar(aes(ymin = proportion - se, ymax = proportion + se), width = .2,
position = position_dodge(.9)) +
facet_wrap(~ map_name) +
labs(title = "Coupled on Yeo7") +
scale_x_discrete(labels = c("Visual", "Somatomotor", "Dorsal Attention", "Ventral Attention", "Limbic", "Frontoparietal", "Default")) +
theme_classic() +
theme(axis.text.x = element_text(angle = 90)); coupled_yeo7_barplot
ggsave(plot = coupled_yeo7_barplot, file.path(settings$output_dir, "figures", "yeo7_pval-prop_fdr05.png"), type = "cairo-png")
#Coupled data on AAL
coupled_aal <- get_prop_sig(coupled_file_paths, file_labels, aal_sym, settings$mask_path)
coupled_aal_barplot <- ggplot(coupled_aal, aes(network_ids, proportion)) +
geom_col() +
geom_errorbar(aes(ymin = proportion - se, ymax = proportion + se), width = .2,
position = position_dodge(.9)) +
facet_wrap(~ map_name) +
labs(title = "Coupled on AAL") +
scale_x_discrete(labels = c("Hippocampus", "Amygdala", "Caudate", "Putamen", "Pallidum", "Thalamus")) +
theme_classic() +
theme(axis.text.x = element_text(angle = 90)); coupled_aal_barplot
ggsave(plot = coupled_aal_barplot, file.path(settings$output_dir, "figures", "aal_pval-prop_fdr05.png"), type = "cairo-png")
###############################
# Adjusted Modality maps
modality_file_paths <- pval_metadata %>%
filter(matrix_type == "modality",
coefficient == "sex" | coefficient == "age",
mc_correction == "fdr05") %>%
pull(file_paths)
file_labels <- c("alff_age", "alff_sex", "cbf-isla_age", "cbf-isla_sex", "idemo_age", "idemo_sex") #TOCHANGE
# Modality data on Yeo7
modality_yeo7 <- get_prop_sig(file_paths = modality_file_paths,
file_labels = file_labels,
atlas = yeo7,
mask = settings$mask_path) #TODO
modality_yeo7_barplot <- ggplot(modality_yeo7, aes(network_ids, proportion)) +
geom_col() +
geom_errorbar(aes(ymin = proportion - se, ymax = proportion + se), width = .2,
position = position_dodge(.9)) +
facet_wrap(~ map_name) +
labs(title = "Modality on Yeo7") +
scale_x_discrete(labels = c("Visual", "Somatomotor", "Dorsal Attention", "Ventral Attention", "Limbic", "Frontoparietal", "Default")) +
theme_classic() +
theme(axis.text.x = element_text(angle = 90)); modality_yeo7_barplot
ggsave(plot = modality_yeo7_barplot, file.path(settings$output_dir, "figures", "yeo7_modality_fdr05.png"), type = "cairo-png")
# Modality data on AAL
modality_aal <- get_prop_sig(modality_file_paths, file_labels, aal_sym, settings$mask_path)
modality_aal_barplot <- ggplot(modality_aal, aes(network_ids, proportion)) +
geom_col() +
geom_errorbar(aes(ymin = proportion - se, ymax = proportion + se), width = .2,
position = position_dodge(.9)) +
facet_wrap(~ map_name) +
labs(title = "Modality on AAL") +
scale_x_discrete(labels = c("Hippocampus", "Amygdala", "Caudate", "Putamen", "Pallidum", "Thalamus")) +
theme_classic() +
theme(axis.text.x = element_text(angle = 90)); modality_aal_barplot
ggsave(plot = modality_aal_barplot, file.path(settings$output_dir, "figures", "aal_modality_fdr05.png"), type = "cairo-png")
coupled_yeo7_barplot <- ggplot(coupled_yeo7, aes(network_ids, proportion)) +
geom_col() +
geom_errorbar(aes(ymin = proportion - se, ymax = proportion + se), width = .2,
position = position_dodge(.9)) +
facet_wrap(~ map_name) +
labs(title = "Coupled on Yeo7", xlab = "Networks", ylab = "Proportion significant") +
scale_x_discrete(labels = c("Visual", "Somatomotor", "Dorsal Attention", "Ventral Attention", "Limbic", "Frontoparietal", "Default")) +
theme_classic() +
theme(axis.text.x = element_text(angle = 90)); coupled_yeo7_barplot
ggsave(plot = modality_aal_barplot, file.path(settings$output_dir, "figures/barplots", "aal_modality_fdr05.png"), type = "cairo-png")
pval_metadata <- read_csv(file.path(settings$output_dir, "csvs", "pval_descriptive_stats.csv"))
yeo7 <- file.path(settings$input_dir, "references/atlases/7yeonetworkPNC.nii.gz") %>% check_ants()
aal <- file.path(settings$input_dir, "references/atlases/AAL_atlas_PNC.nii.gz") %>% check_ants()
# transform aal to lower resolution
aal_sym <- floor(aal/10) * 10
all_indices <- unique(aal_sym)
subcortical_indices <- c(4100, 4200, 7000, 7010, 7020, 7100) #select subcortical regions
excluded_indices <- all_indices[!all_indices %in% subcortical_indices]
for(i in 1:length(excluded_indices)) {
aal_sym[aal_sym == excluded_indices[i]] <- 0
}
# get file paths
coupled_file_paths <- pval_metadata %>%
filter(matrix_type != "modality",
coefficient == "sex" | coefficient == "age",
mc_correction == "fdr05") %>%
pull(file_paths)
file_labels <- c("global_age", "global_sex", "unscaled_age", "unscaled_sex")
#Coupled data on Yeo7
coupled_yeo7 <- get_prop_sig(coupled_file_paths, file_labels, yeo7, settings$mask_path)
coupled_yeo7_barplot <- ggplot(coupled_yeo7, aes(network_ids, proportion)) +
geom_col() +
geom_errorbar(aes(ymin = proportion - se, ymax = proportion + se), width = .2,
position = position_dodge(.9)) +
facet_wrap(~ map_name) +
labs(title = "Coupled on Yeo7") +
scale_x_discrete(labels = c("Visual", "Somatomotor", "Dorsal Attention", "Ventral Attention", "Limbic", "Frontoparietal", "Default")) +
theme_classic() +
theme(axis.text.x = element_text(angle = 90)); coupled_yeo7_barplot
ggsave(plot = coupled_yeo7_barplot, file.path(settings$output_dir, "figures/barplots", "yeo7_pval-prop_fdr05.png"), type = "cairo-png")
#Coupled data on AAL
coupled_aal <- get_prop_sig(coupled_file_paths, file_labels, aal_sym, settings$mask_path)
coupled_aal_barplot <- ggplot(coupled_aal, aes(network_ids, proportion)) +
geom_col() +
geom_errorbar(aes(ymin = proportion - se, ymax = proportion + se), width = .2,
position = position_dodge(.9)) +
facet_wrap(~ map_name) +
labs(title = "Coupled on AAL") +
scale_x_discrete(labels = c("Hippocampus", "Amygdala", "Caudate", "Putamen", "Pallidum", "Thalamus")) +
theme_classic() +
theme(axis.text.x = element_text(angle = 90)); coupled_aal_barplot
ggsave(plot = coupled_aal_barplot, file.path(settings$output_dir, "figures/barplots", "aal_pval-prop_fdr05.png"), type = "cairo-png")
###############################
# Adjusted Modality maps
modality_file_paths <- pval_metadata %>%
filter(matrix_type == "modality",
coefficient == "sex" | coefficient == "age",
mc_correction == "fdr05") %>%
pull(file_paths)
file_labels <- c("alff_age", "alff_sex", "cbf-isla_age", "cbf-isla_sex", "idemo_age", "idemo_sex") #TOCHANGE
# Modality data on Yeo7
modality_yeo7 <- get_prop_sig(file_paths = modality_file_paths,
file_labels = file_labels,
atlas = yeo7,
mask = settings$mask_path) #TODO
modality_yeo7_barplot <- ggplot(modality_yeo7, aes(network_ids, proportion)) +
geom_col() +
geom_errorbar(aes(ymin = proportion - se, ymax = proportion + se), width = .2,
position = position_dodge(.9)) +
facet_wrap(~ map_name) +
labs(title = "Modality on Yeo7") +
scale_x_discrete(labels = c("Visual", "Somatomotor", "Dorsal Attention", "Ventral Attention", "Limbic", "Frontoparietal", "Default")) +
theme_classic() +
theme(axis.text.x = element_text(angle = 90)); modality_yeo7_barplot
ggsave(plot = modality_yeo7_barplot, file.path(settings$output_dir, "figures/barplots", "yeo7_modality_fdr05.png"), type = "cairo-png")
# Modality data on AAL
modality_aal <- get_prop_sig(modality_file_paths, file_labels, aal_sym, settings$mask_path)
modality_aal_barplot <- ggplot(modality_aal, aes(network_ids, proportion)) +
geom_col() +
geom_errorbar(aes(ymin = proportion - se, ymax = proportion + se), width = .2,
position = position_dodge(.9)) +
facet_wrap(~ map_name) +
labs(title = "Modality on AAL") +
scale_x_discrete(labels = c("Hippocampus", "Amygdala", "Caudate", "Putamen", "Pallidum", "Thalamus")) +
theme_classic() +
theme(axis.text.x = element_text(angle = 90)); modality_aal_barplot
ggsave(plot = modality_aal_barplot, file.path(settings$output_dir, "figures/barplots", "aal_modality_fdr05.png"), type = "cairo-png")
