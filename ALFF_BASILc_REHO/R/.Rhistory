library(tidyverse)
library(ANTsRCore)
library(extrantsr)
library(IMCo)
library(parallel)
library(here)
library(freesurfer)
install.packages("freesurfer")
library(freesurfer)
load(here("input/csvs/settings.RData"))
input_filepaths <- read_csv(settings$input_filepaths_path)
predictors <- read_csv(settings$predictors_path)
here()
input_filepaths <- read_csv(here("input/csvs/input_filepaths.csv")
)
predictors <- read_csv(here("input/csvs/predictors.csv")
)
get_prop_sig <- function(file_paths, file_labels, atlas, mask) {
pval_masks <- check_ants(file_paths)
mask <- check_ants(mask)
masked_atlas <- atlas * mask
network_ids <- masked_atlas[masked_atlas != 0] %>%
as.factor() %>%
summary() %>%
names()
common_mask <- atlas * mask
common_mask[common_mask != 0] <- 1
sig_voxel_images <- lapply(pval_masks, function(pval_mask) {
antsSetOrigin(pval_mask, antsGetOrigin(mask))
antsSetDirection(pval_mask, antsGetDirection(mask))
pval_mask * masked_atlas
})
nonsig_voxel_images <- lapply(pval_masks, function(pval_mask) {
antsSetOrigin(pval_mask, antsGetOrigin(mask))
antsSetDirection(pval_mask, antsGetDirection(mask))
(-pval_mask + 1) * masked_atlas
})
for (i in 1:4) {
sig_sum <- sum(sig_voxel_images[[i]] != 0)
nonsig_sum <- sum(nonsig_voxel_images[[i]] != 0)
if (sum(common_mask) != nonsig_sum + sig_sum) {
stop()
}
summaries <- mapply(
function(sig_voxel_image, nonsig_voxel_image, file_label, network_id) {
sig_summary <- sig_voxel_image[sig_voxel_image != 0] %>%
as.factor() %>%
summary() %>%
as.data.frame() %>%
rownames_to_column() %>%
rename(sig_counts = ".")
nonsig_summary <- nonsig_voxel_image[nonsig_voxel_image != 0] %>%
as.factor() %>%
summary() %>%
as.data.frame() %>%
rownames_to_column() %>%
rename(nonsig_counts = ".")
map_name <- rep(file_label, length(network_ids))
df <- data.frame(network_ids) %>%
cbind(map_name) %>%
left_join(sig_summary, by = c("network_ids" = "rowname")) %>%
left_join(nonsig_summary, by = c("network_ids" = "rowname"))
return(df)
},
sig_voxel_images, nonsig_voxel_images, file_labels,
MoreArgs = list(network_ids),
SIMPLIFY = FALSE)
summaries_df <- bind_rows(summaries) %>%
mutate(proportion = sig_counts / (sig_counts + nonsig_counts),
se = sqrt(proportion * (1 - proportion) / (sig_counts + nonsig_counts))
)
return(summaries_df)
}
