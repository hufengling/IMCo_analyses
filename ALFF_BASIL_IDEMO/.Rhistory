file_path_output_dir = "descriptive")
source(here("R/mri_vol2surf.R"))
split_atlas_into_regions <- function(atlas, atlas_name = c("yeo7", "aal"), region_out_dir) {
dir.create(region_out_dir, showWarnings = FALSE)
atlas[atlas == 0] <- NA
region_names <- atlas %>%
as.factor() %>%
summary() %>%
names()
region_names <- region_names[-length(region_names)]
out_file_names <- region_names %>%
paste0(atlas_name, "_", ., ".nii.gz") %>%
file.path(region_out_dir, .)
mapply(
function(region_name, out_file_name) {
temp <- atlas * 1 # causes R to make a copy of atlas at a new address
temp[atlas == region_name] <- 1
temp[atlas != region_name] <- 0
antsImageWrite(temp, out_file_name)
}, as.numeric(region_names),
out_file_names)
return(out_file_names)
}
get_names <- function(paths) {
names_list <- lapply(paths, function(path) {
split_path <- str_split(path, "/") %>%
unlist()
file_name <- split_path[length(split_path)]
})
unlist(names_list)
}
transform_to_MNI <- function(images, paths, MNI_transform_out_dir) {
MNI <- check_ants(file.path(settings$input_dir, "references/atlases/MNI152_T1_1mm_brain.nii.gz"))
transform_list <- c(file.path(settings$input_dir, "references/transformations/PNC-MNI_0Warp.nii.gz"),
file.path(settings$input_dir, "references/transformations/PNC-MNI_1Affine.mat"))
file_names <- get_names(paths)
mapply(function(image, file_name, MNI, transform_list) {
image_transformed <- antsApplyTransforms(fixed = MNI,
moving = image,
transformlist = transform_list,
interpolator = "nearestNeighbor",
imagetype = 0)
antsImageWrite(image_transformed, file.path(MNI_transform_out_dir, file_name))
return(file.path(MNI_transform_out_dir, file_name))
}, image = images, file_name = file_names,
MoreArgs = list(MNI = MNI, transform_list = transform_list))
}
project_to_surface <- function(image_MNI_paths, out_dir) {
dir.create(out_dir, showWarnings = FALSE)
hemi_paths <- lapply(image_MNI_paths, function(image_path) {
outfile = get_names(image_path)
lh <- mri_vol2surf(mov = image_path,
target_subject = 'fsaverage',
opts = "--interp nearest",
outfile = file.path(out_dir, outfile),
hemi = "lh")
rh <- mri_vol2surf(mov = image_path,
target_subject = 'fsaverage',
opts = "--interp nearest",
outfile = file.path(out_dir, outfile),
hemi = "rh")
c(file.path(lh), file.path(rh))
})
num_files <- length(hemi_paths)
paths_df <- hemi_paths %>%
unlist() %>%
matrix(byrow = TRUE, ncol = 1) %>%
as.data.frame() %>%
rename(paths = "V1") %>%
mutate(hemisphere = rep(c("lh", "rh"), num_files))
paths_df
}
preprocess_for_spin_test <- function(file_paths = NULL, atlas_name = c("", "yeo7", "aal"),
fs_images_dir,
file_path_output_dir = "") {
if (is.null(file_paths)) {
if (atlas_name == "yeo7") {
atlas <- check_ants(file.path(settings$input_dir, "references/atlases/7yeonetworkPNC.nii.gz"))
atlas_output_dir <- "yeo7_regions"
}
if (atlas_name == "aal") {
atlas <- check_ants(file.path(settings$input_dir, "references/atlases/AAL_atlas_PNC.nii.gz"))
atlas_output_dir <- "aal_regions"
for(i in 0:9) {
lower <- i * 1000
upper <- (i + 1) * 1000
atlas[atlas >= lower & atlas < upper] <- lower
}
}
region_paths <- split_atlas_into_regions(atlas,
atlas_name = atlas_name,
file.path(fs_images_dir, "PNC_space", atlas_output_dir))
region_images <- check_ants(region_paths)
region_transformed_paths <- transform_to_MNI(region_images,
region_paths,
file.path(fs_images_dir, "MNI_space", atlas_output_dir))
region_sphere <- project_to_surface(region_transformed_paths,
file.path(fs_images_dir, "surfaces", atlas_output_dir))
return(NULL)
}
if (!is.null(file_paths)) {
pval_images <- check_ants(file_paths)
pval_transformed_paths <- transform_to_MNI(pval_images,
file_paths,
file.path(fs_images_dir, "MNI_space", file_path_output_dir))
pval_sphere <- project_to_surface(pval_transformed_paths,
file.path(fs_images_dir, "surfaces", file_path_output_dir))
return(NULL)
}
}
#Sys.setenv(SUBJECTS_DIR = "/home/fengling/software/freesurfer/subjects")
pval_descriptive <- read_csv(file.path(settings$output_dir, "csvs/pval_descriptive_stats.csv"))
pval_coupling_paths <- pval_descriptive %>%
filter(mc_correction == "fdr05",
matrix_type != "modality") %>%
pull(file_paths) %>%
as.list()
pval_modality_paths <- pval_descriptive %>%
filter(mc_correction == "fdr05",
matrix_type == "modality") %>%
pull(file_paths) %>%
as.list()
fs_images_dir <- file.path(settings$output_dir, "freesurfer_images")
#atlas
preprocess_for_spin_test(atlas_name = "yeo7", #TODO should I apply grey matter mask?
fs_images_dir = fs_images_dir)
preprocess_for_spin_test(atlas_name = "aal",
fs_images_dir = fs_images_dir)
#pvals
preprocess_for_spin_test(file_paths = pval_coupling_paths,
fs_images_dir = fs_images_dir,
file_path_output_dir = "pvals/adjusted")
preprocess_for_spin_test(file_paths = pval_modality_paths,
fs_images_dir = fs_images_dir,
file_path_output_dir = "pvals/modality")
#descriptive
preprocess_for_spin_test(file_paths = list.files(file.path(settings$output_dir, "niftis/descriptive"),
full.names = TRUE) %>% as.list(),
fs_images_dir = fs_images_dir,
file_path_output_dir = "descriptive")
pval_coupling_paths
pval_modality_paths
Sys.getenv(SUBJECTS_DIR)
Sys.getenv($SUBJECTS_DIR)
system("echo $SUBJECTS_DIR")
system("unset SUBJECTS_DIR")
system("echo $SUBJECTS_DIR")
system("unset $SUBJECTS_DIR")
system("echo $SUBJECTS_DIR")
system("unset SUBJECTS_DIR")
system("echo $SUBJECTS_DIR")
system("unsetenv SUBJECTS_DIR")
library(tidyverse)
library(ANTsRCore)
library(extrantsr)
library(IMCo)
library(parallel)
library(here)
library(freesurfer)
library(tidyverse)
library(ANTsRCore)
library(extrantsr)
library(IMCo)
library(parallel)
library(here)
library(freesurfer)
load(here("input/csvs/settings.RData"))
input_filepaths <- read_csv(settings$input_filepaths_path)
predictors <- read_csv(settings$predictors_path)
settings
settings$input_file
View(input_filepaths)
source(here("R/mri_vol2surf.R"))
split_atlas_into_regions <- function(atlas, atlas_name = c("yeo7", "aal"), region_out_dir) {
dir.create(region_out_dir, showWarnings = FALSE)
atlas[atlas == 0] <- NA
region_names <- atlas %>%
as.factor() %>%
summary() %>%
names()
region_names <- region_names[-length(region_names)]
out_file_names <- region_names %>%
paste0(atlas_name, "_", ., ".nii.gz") %>%
file.path(region_out_dir, .)
mapply(
function(region_name, out_file_name) {
temp <- atlas * 1 # causes R to make a copy of atlas at a new address
temp[atlas == region_name] <- 1
temp[atlas != region_name] <- 0
antsImageWrite(temp, out_file_name)
}, as.numeric(region_names),
out_file_names)
return(out_file_names)
}
get_names <- function(paths) {
names_list <- lapply(paths, function(path) {
split_path <- str_split(path, "/") %>%
unlist()
file_name <- split_path[length(split_path)]
})
unlist(names_list)
}
transform_to_MNI <- function(images, paths, MNI_transform_out_dir) {
MNI <- check_ants(file.path(settings$input_dir, "references/atlases/MNI152_T1_1mm_brain.nii.gz"))
transform_list <- c(file.path(settings$input_dir, "references/transformations/PNC-MNI_0Warp.nii.gz"),
file.path(settings$input_dir, "references/transformations/PNC-MNI_1Affine.mat"))
file_names <- get_names(paths)
mapply(function(image, file_name, MNI, transform_list) {
image_transformed <- antsApplyTransforms(fixed = MNI,
moving = image,
transformlist = transform_list,
interpolator = "nearestNeighbor",
imagetype = 0)
antsImageWrite(image_transformed, file.path(MNI_transform_out_dir, file_name))
return(file.path(MNI_transform_out_dir, file_name))
}, image = images, file_name = file_names,
MoreArgs = list(MNI = MNI, transform_list = transform_list))
}
project_to_surface <- function(image_MNI_paths, out_dir) {
dir.create(out_dir, showWarnings = FALSE)
hemi_paths <- lapply(image_MNI_paths, function(image_path) {
outfile = get_names(image_path)
lh <- mri_vol2surf(mov = image_path,
target_subject = 'fsaverage',
opts = "--interp nearest",
outfile = file.path(out_dir, outfile),
hemi = "lh")
rh <- mri_vol2surf(mov = image_path,
target_subject = 'fsaverage',
opts = "--interp nearest",
outfile = file.path(out_dir, outfile),
hemi = "rh")
c(file.path(lh), file.path(rh))
})
num_files <- length(hemi_paths)
paths_df <- hemi_paths %>%
unlist() %>%
matrix(byrow = TRUE, ncol = 1) %>%
as.data.frame() %>%
rename(paths = "V1") %>%
mutate(hemisphere = rep(c("lh", "rh"), num_files))
paths_df
}
preprocess_for_spin_test <- function(file_paths = NULL, atlas_name = c("", "yeo7", "aal"),
fs_images_dir,
file_path_output_dir = "") {
if (is.null(file_paths)) {
if (atlas_name == "yeo7") {
atlas <- check_ants(file.path(settings$input_dir, "references/atlases/7yeonetworkPNC.nii.gz"))
atlas_output_dir <- "yeo7_regions"
}
if (atlas_name == "aal") {
atlas <- check_ants(file.path(settings$input_dir, "references/atlases/AAL_atlas_PNC.nii.gz"))
atlas_output_dir <- "aal_regions"
for(i in 0:9) {
lower <- i * 1000
upper <- (i + 1) * 1000
atlas[atlas >= lower & atlas < upper] <- lower
}
}
region_paths <- split_atlas_into_regions(atlas,
atlas_name = atlas_name,
file.path(fs_images_dir, "PNC_space", atlas_output_dir))
region_images <- check_ants(region_paths)
region_transformed_paths <- transform_to_MNI(region_images,
region_paths,
file.path(fs_images_dir, "MNI_space", atlas_output_dir))
region_sphere <- project_to_surface(region_transformed_paths,
file.path(fs_images_dir, "surfaces", atlas_output_dir))
return(NULL)
}
if (!is.null(file_paths)) {
pval_images <- check_ants(file_paths)
pval_transformed_paths <- transform_to_MNI(pval_images,
file_paths,
file.path(fs_images_dir, "MNI_space", file_path_output_dir))
pval_sphere <- project_to_surface(pval_transformed_paths,
file.path(fs_images_dir, "surfaces", file_path_output_dir))
return(NULL)
}
}
system("echo $SUBJECTS_DIR")
Sys.setenv(FS_LICENSE="/home/fengling/software/freesurfer/license.txt")
system("echo $FS_LICENSE")
pval_coupling_paths <- pval_descriptive %>%
filter(mc_correction == "fdr05",
matrix_type != "modality") %>%
pull(file_paths) %>%
as.list()
pval_descriptive <- read_csv(file.path(settings$output_dir, "csvs/pval_descriptive_stats.csv"))
pval_coupling_paths <- pval_descriptive %>%
filter(mc_correction == "fdr05",
matrix_type != "modality") %>%
pull(file_paths) %>%
as.list()
pval_modality_paths <- pval_descriptive %>%
filter(mc_correction == "fdr05",
matrix_type == "modality") %>%
pull(file_paths) %>%
as.list()
fs_images_dir <- file.path(settings$output_dir, "freesurfer_images")
#atlas
preprocess_for_spin_test(atlas_name = "yeo7", #TODO should I apply grey matter mask?
fs_images_dir = fs_images_dir)
preprocess_for_spin_test(atlas_name = "aal",
fs_images_dir = fs_images_dir)
#pvals
preprocess_for_spin_test(file_paths = pval_coupling_paths,
fs_images_dir = fs_images_dir,
file_path_output_dir = "pvals/adjusted")
preprocess_for_spin_test(file_paths = pval_modality_paths,
fs_images_dir = fs_images_dir,
file_path_output_dir = "pvals/modality")
#descriptive
preprocess_for_spin_test(file_paths = list.files(file.path(settings$output_dir, "niftis/descriptive"),
full.names = TRUE) %>% as.list(),
fs_images_dir = fs_images_dir,
file_path_output_dir = "descriptive")
warnings()
pwd()
getwd()
test <- check_ants(here("output/freesurfer_images/surfaces/yeo7_regions/lh.yeo7_1.nii.gz"))
test
6 * 27307
library(tidyverse)
library(ANTsRCore)
library(extrantsr)
library(IMCo)
library(parallel)
library(here)
library(freesurfer)
#TOCHANGE
idemo_qa <- read_csv(here("input/csvs/idemodata/n1601_idemo_FinalQA_092817.csv"))
idemo <- read_csv(here("input/csvs/idemodata/n1601_idemoBehavior_20151130.csv"))
idemo_health <- read_csv(here("input/csvs/idemodata/n1601_health_20170421.csv"))
pnc_demographics <- read_csv(here("input/csvs/demographics/binded_demographics.csv"))
basil_subj <- read_table(here("input/csvs/demographics/basil_subj.txt"), col_names = FALSE)
idemo_qa <- idemo_qa %>% filter(idemoExcludeVoxelwise == 0)
idemo <- idemo %>% filter(idemoBehHappyCorrectCount >= 8)
idemo_health <- idemo_health %>% filter(ltnExcludev2 == 0)
pnc_demographics <- pnc_demographics %>% rename(scanid = "id")
basil_subj <- basil_subj %>% separate(X1, c("scanid", "settings", "file_root"), sep = "_")
common_pts <- Reduce(intersect, list(idemo_qa$scanid, idemo$scanid, idemo_health$scanid, pnc_demographics$scanid, basil_subj$scanid)) %>%
as.data.frame() %>%
rename(subj_num = ".")
input_filepaths <- common_pts %>%
mutate(modality_1 = paste0(subj_num, "_alffStd.nii.gz") %>% file.path("~/Documents/IMCo_analyses/input/niftis/alff", .),
modality_2 = paste0(subj_num, "_pvgmpnc_cbf.nii.gz") %>% file.path("~/Documents/IMCo_analyses/input/niftis/cbf-basil", .),
modality_3 = paste0(subj_num, "_sigchange_cope1_TaskStd.nii.gz") %>% file.path("~/Documents/IMCo_analyses/input/niftis/idemo", .))
input_filepaths$subj_num <- as.numeric(input_filepaths$subj_num)
write_csv(input_filepaths, here("input/csvs/input_filepaths.csv"))
rm(pnc_demographics, common_pts, idemo, idemo_health, basil_subj)
#TOCHANGE
idemo_qa <- idemo_qa %>% rename(subj_num = scanid)
demographics <- read_csv(here("input/csvs/demographics/binded_demographics.csv")) %>%
rename(subj_num = id)
demographics <- right_join(demographics, input_filepaths,
by = "subj_num") %>%
left_join(idemo_qa, by = "subj_num") %>% mutate(across(contains("Exclude"), as.factor),
sex = case_when(
sex == 1 ~ "Male",
sex == 2 ~ "Female",
T ~ NA_character_),
race2 = case_when(
race2 == 1 ~ "White",
race2 == 2 ~ "Black",
race2 == 3 ~ "Other",
T ~ NA_character_),
across(c(sex, race, race2, ethnicity, handednessv2), as.factor))
predictors <- demographics %>%
select(sex, ageAtScan1, race2, pcaslRelMeanRMSMotion, restRelMeanRMSMotion, idemoRelMeanRMSMotion)
write_csv(predictors, file.path(here("input/csvs/predictors.csv")))
rm(demographics, idemo_qa)
load(here("input/csvs/settings.RData"))
input_filepaths <- read_csv(settings$input_filepaths_path)
predictors <- read_csv(settings$predictors_path)
fs_images_dir <- file.path(settings$output_dir, "freesurfer_images/surfaces/")
fs_images_dir <- file.path(settings$output_dir, "freesurfer_images/MNI_space/pvals")
list.files(fs_dir())
list.files(fs_images_dir)
fs_images_dir <- file.path(settings$output_dir, "freesurfer_images/MNI_space/pvals/modality")
for(file in list.files(fs_images_dir)) {
print(sum(check_ants(file)))
}
for(file in list.files(fs_images_dir)) {
image <- check_ants(file)
}
for(file in list.files(fs_images_dir)) {
print(file)
image <- check_ants(file)
}
for(file in list.files(fs_images_dir)) {
print(file)
image <- check_ants(file.path(fs_images_dir, file))
}
for(file in list.files(fs_images_dir)) {
print(file)
image <- check_ants(file.path(fs_images_dir, file))
print(sum(image))
}
fs_images_dir <- file.path(settings$output_dir, "freesurfer_images/MNI_space/pvals/modality")
settings$output_dir
fs_images_dir <- file.path(settings$output_dir, "../../ALFF_BASIL/freesurfer_images/MNI_space/pvals/modality")
images <- list()
for(file in list.files(fs_images_dir)) {
print(file)
image <- check_ants(file.path(fs_images_dir, file))
print(sum(image))
}
fs_images_dir <- file.path(settings$output_dir, "../../ALFF_BASIL/freesurfer_images/MNI_space/pvals/modality")
fs_images_dir
fs_images_dir <- file.path(settings$output_dir, "../../ALFF_BASIL/output/freesurfer_images/MNI_space/pvals/modality")
for(file in list.files(fs_images_dir)) {
print(file)
image <- check_ants(file.path(fs_images_dir, file))
print(sum(image))
}
for(file in list.files(fs_images_dir)) {
print(file)
image <- check_ants(file.path(fs_images_dir, file))
print(sum(image))
}
fs_images_dir <- file.path(settings$output_dir, "freesurfer_images/MNI_space/pvals/modality")
for(file in list.files(fs_images_dir)) {
print(file)
image <- check_ants(file.path(fs_images_dir, file))
print(sum(image))
}
fs_images_dir <- file.path(settings$output_dir, "../../ALFF_BASIL/output/freesurfer_images/PNC_space/pvals/modality")
for(file in list.files(fs_images_dir)) {
print(file)
image <- check_ants(file.path(fs_images_dir, file))
print(sum(image))
}
fs_images_dir <- file.path(settings$output_dir, "../../ALFF_BASIL/output/freesurfer_images/MNI_space/descriptive")
for(file in list.files(fs_images_dir)) {
print(file)
image <- check_ants(file.path(fs_images_dir, file))
print(sum(image))
}
fs_images_dir <- file.path(settings$output_dir, "freesurfer_images/MNI_space/descriptive")
for(file in list.files(fs_images_dir)) {
print(file)
image <- check_ants(file.path(fs_images_dir, file))
print(sum(image))
}
for(file in list.files(fs_images_dir)) {
print(file)
image <- check_ants(file.path(fs_images_dir, file))
print(sum(image[image == 0]))
}
?count
print(count(image, value = 0))
for(file in list.files(fs_images_dir)) {
print(file)
image <- check_ants(file.path(fs_images_dir, file))
image[image != 0] %>% sum()
print(n)
}
for(file in list.files(fs_images_dir)) {
print(file)
image <- check_ants(file.path(fs_images_dir, file))
sum(image[image != 0])
print(n)
}
for(file in list.files(fs_images_dir)) {
print(file)
image <- check_ants(file.path(fs_images_dir, file))
n <- sum(image[image != 0])
print(n)
}
print(fs_images_dir)
fs_images_dir <- file.path(settings$output_dir, "../../ALFF_BASIL/output/freesurfer_images/MNI_space/descriptive")
print(fs_images_dir)
for(file in list.files(fs_images_dir)) {
print(file)
image <- check_ants(file.path(fs_images_dir, file))
n <- sum(image[image != 0])
print(n)
}
n <- length(which(x != 0))
n <- length(which(image != 0))
print(n)
fs_images_dir <- file.path(settings$output_dir, "../../ALFF_BASIL/output/freesurfer_images/MNI_space/descriptive")
print(fs_images_dir)
for(file in list.files(fs_images_dir)) {
print(file)
image <- check_ants(file.path(fs_images_dir, file))
n <- length(which(image == 0))
print(n)
}
fs_images_dir <- file.path(settings$output_dir, "freesurfer_images/MNI_space/descriptive")
print(fs_images_dir)
for(file in list.files(fs_images_dir)) {
print(file)
image <- check_ants(file.path(fs_images_dir, file))
n <- length(which(image == 0))
print(n)
}
fs_images_dir <- file.path(settings$output_dir, "../../ALFF_IDEMO_ISLA/output/freesurfer_images/MNI_space/descriptive")
fs_images_dir <- list(file.path(settings$output_dir, "../../ALFF_BASIL/output/freesurfer_images/MNI_space/descriptive"),
file.path(settings$output_dir, "freesurfer_images/MNI_space/descriptive"),
file.path(settings$output_dir, "../../ALFF_IDEMO_ISLA/output/freesurfer_images/MNI_space/descriptive"))
for(dir in fs_images_dir){
print(dir)
for(file in list.files(dir)) {
print(file)
image <- check_ants(file.path(dir, file))
n <- length(which(image == 0))
print(n)
}
}
