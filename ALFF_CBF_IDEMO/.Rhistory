imco(files, mask,
out_dir = "output/niftis/coupled/global_wcov",
out_name = "3234",
ref = 1, fwhm = 3,
propMiss = 0.9, pcaType = "global", matrixType = "wcov"
)
?getNeighborhoodInMask
load_all()
library(devtools)
load_all()
library(tidyverse)
library(ANTsRCore)
library(extrantsr)
library(IMCo)
library(here)
?here
here::i_am("/home/fengling/Documents/IMCo_analyses/")
here::set_here("..")
library(tidyverse)
library(ANTsRCore)
library(extrantsr)
library(IMCo)
library(here)
library(here)
here::set_here("..")
library(here)
here()
here::i_am("..")
here()
idemo_qa <- read_csv(here("input/csvs/idemodata/n1601_idemo_FinalQA_092817.csv"))
idemo <- read_csv(here("input/csvs/idemodata/n1601_idemoBehavior_20151130.csv"))
idemo_health <- read_csv(here("input/csvs/idemodata/n1601_health_20170421.csv"))
pnc_demographics <- read_csv(here("input/csvs/demographics/binded_demographics.csv"))
idemo_qa <- idemo_qa %>% filter(idemoExcludeVoxelwise == 0)
idemo <- idemo %>% filter(idemoBehHappyCorrectCount >= 8)
idemo_health <- idemo_health %>% filter(ltnExcludev2 == 0)
pnc_demographics <- pnc_demographics %>% rename(scanid = "id")
common_pts <- Reduce(intersect, list(idemo_qa$scanid, idemo$scanid, idemo_health$scanid, pnc_demographics$scanid)) %>%
as.data.frame() %>%
rename(subj_num = ".")
input_filepaths <- common_pts %>%
mutate(modality_1 = paste0(subj_num, "_alffStd.nii.gz") %>% file.path("~/Documents/IMCo_analyses/input/niftis/alff"),
modality_2 = paste0(subj_num, "_asl_quant_ssT1Std.nii.gz") %>% file.path("~/Documents/IMCo_analyses/input/niftis/cbf"),
modality_3 = paste0(subj_num, "_sigchange_cope1_TaskStd.nii.gz") %>% file.path("~/Documents/IMCo_analyses/input/niftis/idemo"))
write_csv(input_filepaths, here("input/csvs/input_filepaths.csv"))
rm(common_pts, idemo, idemo_health, idemo_qa)
output_dir <- here("output") #base directory for all outputs
input_dir <- here("input") #base directory for all inputs
input_dir
nifti_dir <- file.path(input_dir,
list("niftis/alff",
"niftis/cbf",
"niftis/idemo"))
mask_path <- file.path(input_dir, "references/masks/gm10_pcals_rest.nii.gz")
bash_file <- rep(0, nrow(input_filepaths))
for(i in 1:nrow(input_filepaths)) {
line <- input_filepaths[i, ]
out_name <- line[1]
subject_files <- paste(line[1, 2], line[1, 3], line[1, 4], sep = ",")
bsub_args <- paste("bsub",
"-q taki_normal",
paste("-J", shQuote("intermodal_coupling")),
paste("-R", shQuote("rusage[mem=4000]")),
"-M 10000",
paste("-o", file.path(settings$output_dir, "stdout/intermodal_coupling.txt")))
Rscript_args <- paste("Rscript", here("R/batch_scripts/01_perform_imco.R"),
subject_files,
settings$mask_path,
settings$output_dir,
out_name,
settings$fwhm,
settings$propMiss)
bash_file[i] <- paste(bsub_args, Rscript_args)
}
write_lines(bash_file, file.path(settings$batch_script_dir, "01_commands.sh"))
<
<
output_dir <- here("output") #base directory for all outputs
input_dir <- here("input") #base directory for all inputs
nifti_dir <- file.path(input_dir,
list("niftis/alff",
"niftis/cbf",
"niftis/idemo"))
mask_path <- file.path(input_dir, "references/masks/gm10_pcals_rest.nii.gz")
batch_script_dir <- here("R/batch_scripts")
settings <- list(input_filepaths_path = file.path(input_dir, "csvs/input_filepaths.csv"),
output_dir = output_dir,
input_dir = input_dir,
nifti_dir = nifti_dir,
batch_script_dir = batch_script_dir,
mask_path = mask_path,
fwhm = fwhm,
propMiss = propMiss)
save(settings, file = file.path(input_dir, "csvs/settings.RData"))
fwhm <- 3
propMiss <- 0.9
settings <- list(input_filepaths_path = file.path(input_dir, "csvs/input_filepaths.csv"),
output_dir = output_dir,
input_dir = input_dir,
nifti_dir = nifti_dir,
batch_script_dir = batch_script_dir,
mask_path = mask_path,
fwhm = fwhm,
propMiss = propMiss)
save(settings, file = file.path(input_dir, "csvs/settings.RData"))
bash_file <- rep(0, nrow(input_filepaths))
for(i in 1:nrow(input_filepaths)) {
line <- input_filepaths[i, ]
out_name <- line[1]
subject_files <- paste(line[1, 2], line[1, 3], line[1, 4], sep = ",")
bsub_args <- paste("bsub",
"-q taki_normal",
paste("-J", shQuote("intermodal_coupling")),
paste("-R", shQuote("rusage[mem=4000]")),
"-M 10000",
paste("-o", file.path(settings$output_dir, "stdout/intermodal_coupling.txt")))
Rscript_args <- paste("Rscript", here("R/batch_scripts/01_perform_imco.R"),
subject_files,
settings$mask_path,
settings$output_dir,
out_name,
settings$fwhm,
settings$propMiss)
bash_file[i] <- paste(bsub_args, Rscript_args)
}
bash_file[3]
write_lines(bash_file, file.path(settings$batch_script_dir, "01_commands.sh"))
demographics <- read_csv(here("input/csvs/demographics/binded_demographics.csv")
demographics <- read_csv(here("input/csvs/demographics/binded_demographics.csv"))
View(demographics)
demographics <- read_csv(here("input/csvs/demographics/binded_demographics.csv")) %>%
rename(subj_num = id)
View(demographics)
demographics <- right_join(demographics, input_filepaths$subj_num,
by = "subj_num") %>%
mutate(across(contains("Exclude"), as.factor),
sex = case_when(
sex == 1 ~ "Male",
sex == 2 ~ "Female",
T ~ NA_character_),
race2 = case_when(
race2 == 1 ~ "White",
race2 == 2 ~ "Black",
race2 == 3 ~ "Other",
T ~ NA_character_),
across(c(sex, race, race2, ethnicity, handednessv2), as.factor))
demographics <- right_join(demographics, input_filepaths$subj_num,
by = "subj_num") %>%
mutate(across(contains("Exclude"), as.factor),
sex = case_when(
sex == 1 ~ "Male",
sex == 2 ~ "Female",
T ~ NA_character_),
race2 = case_when(
race2 == 1 ~ "White",
race2 == 2 ~ "Black",
race2 == 3 ~ "Other",
T ~ NA_character_),
across(c(sex, race, race2, ethnicity, handednessv2), as.factor))
View(demographics)
demographics <- read_csv(here("input/csvs/demographics/binded_demographics.csv")) %>%
rename(subj_num = id)
View(demographics)
demographics <- right_join(demographics, input_filepaths$subj_num,
by = "subj_num")
demographics <- right_join(demographics, input_filepaths,
by = "subj_num") %>%
mutate(across(contains("Exclude"), as.factor),
sex = case_when(
sex == 1 ~ "Male",
sex == 2 ~ "Female",
T ~ NA_character_),
race2 = case_when(
race2 == 1 ~ "White",
race2 == 2 ~ "Black",
race2 == 3 ~ "Other",
T ~ NA_character_),
across(c(sex, race, race2, ethnicity, handednessv2), as.factor))
View(demographics)
summary(race2)
predictors <- demographics %>%
select(sex, ageAtScan1, race2, pcaslRelMeanRMSMotion, restRelMeanRMSMotion)
View(predictors)
library(parallel)
detectCores()
analyze_coupled_images <- function(coupled_dir, mask, predictors, cores = 2) {
image_vector_list <- load_images(coupled_dir, mask)
voxel_vector_list <- transpose_list(image_vector_list)
descriptive_list <- make_descriptive_images(voxel_vector_list)
pvalbyvoxel_list <- parallel::mclapply(voxel_vector_list,
get_pvals_by_voxel,
predictors = predictors,
mc.cores = cores)
pvalbycoef_list <- transpose_list(pvalbyvoxel_list)
write_pvals(descriptive_list, mask, dir, is_descriptive = TRUE)
write_pvals(pvalbycoef_list, mask, dir)
return(NULL)
}
load_images <- function(dir, mask) {
files <- list.files(dir)
file_paths <- file.path(dir, files)
image_vector_list <- lapply(file_paths,
function(x, mask) {
image <- extrantsr::check_ants(x)
image[mask == 0] <- NA
image_vector <- image %>% as.numeric()
image_vector_no_NAs <- image_vector[!is.na(image_vector)]
return(image_vector_no_NAs)
},
mask = mask
)
return(image_vector_list)
}
transpose_list <- function(list) {
matrix <- list %>%
unlist() %>%
matrix(byrow = TRUE, nrow = length(list))
transposed_list <- lapply(seq_len(ncol(matrix)), function(i) matrix[, i])
return(transposed_list)
}
make_descriptive_images <- function(voxel_vector_list) {
descriptive_vector <- lapply(voxel_vector_list, function(voxel_vector) {
voxel_mean <- sum(voxel_vector)/length(voxel_vector)
voxel_variance <- var(voxel_vector)
return(c(voxel_mean, voxel_variance))
}) %>% unlist()
voxel_mean_vector <- descriptive_vector[c(T, F)]
voxel_variance_vector <- descriptive_vector[c(F, T)]
return(list(voxel_mean_vector, voxel_variance_vector))
}
get_pvals_by_voxel <- function(voxel_vector, predictors) {
if (length(voxel_vector) != nrow(predictors)) {
stop("n doesn't match")
}
regression <- lm(voxel_vector ~
sex + ageAtScan1 +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion,
data = predictors) %>%
summary()
reg_pvals <- regression$coefficients[c(2, 3), 4]
interaction_regression <- lm(voxel_vector ~
sex * ageAtScan1 +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion,
data = predictors) %>%
summary()
int_pvals <- interaction_regression$coefficients[8, 4]
gam_regression_interaction <- gam(voxel_vector ~ ageAtScan1 + sex + ageAtScan1*sex +
s(ageAtScan1, by = sex, k = 25, fx = TRUE) +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion,
data = predictors)
gam_regression_base <- gam(voxel_vector ~ ageAtScan1 + sex +
s(ageAtScan1, k = 25, fx = TRUE) +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion,
data = predictors)
gam_pvals <- anova(gam_regression_interaction, gam_regression_base, test="LRT")$Pr[2]
pvals <- c(reg_pvals, int_pvals, gam_pvals)
return(pvals)
}
write_pvals <- function(image_list, mask, dir, is_descriptive = FALSE) {
mask_indices <- which(as.array(mask) > 0)
reference <- extrantsr::check_ants(file.path(dir, list.files(dir)[[1]]))
file_name <- (dir %>% str_split("/"))[[1]][2]
if (is_descriptive) {
descriptive_dir <- file.path(settings$output_dir, "niftis/descriptive")
dir.create(descriptive_dir, showWarnings = FALSE)
names <- c("_mean", "_variance")
for (i in 1:length(image_list)) {
descriptive_image <- make_ants_image(image_list[[i]], mask_indices, reference)
ANTsRCore::antsImageWrite(
descriptive_image,
file.path(
descriptive_dir,
paste0(file_name, names[i], ".nii.gz")))
}
return(NULL)
}
for (i in 1:length(image_list)) {
pval_image <- make_ants_image(image_list[[i]], mask_indices, reference)
ANTsRCore::antsImageWrite(
pval_image,
file.path(
output_dir, "niftis/pvals",
paste0(file_name, "_pval_", i, ".nii.gz")
)
)
}
return(NULL)
}
analyze_coupled_images <- function(coupled_dir, mask, predictors, cores = 2) {
image_vector_list <- load_images(coupled_dir, mask)
voxel_vector_list <- transpose_list(image_vector_list)
descriptive_list <- make_descriptive_images(voxel_vector_list)
pvalbyvoxel_list <- parallel::mclapply(voxel_vector_list,
get_pvals_by_voxel,
predictors = predictors,
mc.cores = cores)
pvalbycoef_list <- transpose_list(pvalbyvoxel_list)
write_pvals(descriptive_list, mask, dir, is_descriptive = TRUE)
write_pvals(pvalbycoef_list, mask, dir)
return(NULL)
}
analyze_coupled_images(coupled_dir = file.path(settings$output_dir, "niftis/coupled/global_wcov"),
mask = settings$mask_path,
predictors = predictors)
load_images <- function(dir, mask) {
mask <- extrantsr::check_ants(mask)
files <- list.files(dir)
file_paths <- file.path(dir, files)
image_vector_list <- lapply(file_paths,
function(x, mask) {
image <- extrantsr::check_ants(x)
image[mask == 0] <- NA
image_vector <- image %>% as.numeric()
image_vector_no_NAs <- image_vector[!is.na(image_vector)]
return(image_vector_no_NAs)
},
mask = mask
)
return(image_vector_list)
}
analyze_coupled_images <- function(coupled_dir, mask, predictors, cores = 2) {
image_vector_list <- load_images(coupled_dir, mask)
voxel_vector_list <- transpose_list(image_vector_list)
descriptive_list <- make_descriptive_images(voxel_vector_list)
pvalbyvoxel_list <- parallel::mclapply(voxel_vector_list,
get_pvals_by_voxel,
predictors = predictors,
mc.cores = cores)
pvalbycoef_list <- transpose_list(pvalbyvoxel_list)
write_pvals(descriptive_list, mask, dir, is_descriptive = TRUE)
write_pvals(pvalbycoef_list, mask, dir)
return(NULL)
}
analyze_coupled_images(coupled_dir = file.path(settings$output_dir, "niftis/coupled/global_wcov"),
mask = settings$mask_path,
predictors = predictors)
settings$output_dir
write_pvals <- function(image_list, mask, dir, is_descriptive = FALSE) {
mask <- extrantsr::check_ants(mask)
mask_indices <- which(as.array(mask) > 0)
reference <- extrantsr::check_ants(file.path(dir, list.files(dir)[[1]]))
file_name <- (dir %>% str_split("/"))[[1]][2]
if (is_descriptive) {
descriptive_dir <- file.path(settings$output_dir, "niftis/descriptive")
dir.create(descriptive_dir, showWarnings = FALSE)
names <- c("_mean", "_variance")
for (i in 1:length(image_list)) {
descriptive_image <- make_ants_image(image_list[[i]], mask_indices, reference)
ANTsRCore::antsImageWrite(
descriptive_image,
file.path(
descriptive_dir,
paste0(file_name, names[i], ".nii.gz")))
}
return(NULL)
}
for (i in 1:length(image_list)) {
pval_image <- make_ants_image(image_list[[i]], mask_indices, reference)
ANTsRCore::antsImageWrite(
pval_image,
file.path(
output_dir, "niftis/pvals",
paste0(file_name, "_pval_", i, ".nii.gz")
)
)
}
return(NULL)
}
analyze_coupled_images <- function(coupled_dir, mask, predictors, cores = 2) {
image_vector_list <- load_images(coupled_dir, mask)
voxel_vector_list <- transpose_list(image_vector_list)
descriptive_list <- make_descriptive_images(voxel_vector_list)
pvalbyvoxel_list <- parallel::mclapply(voxel_vector_list,
get_pvals_by_voxel,
predictors = predictors,
mc.cores = cores)
pvalbycoef_list <- transpose_list(pvalbyvoxel_list)
write_pvals(descriptive_list, mask, dir, is_descriptive = TRUE)
write_pvals(pvalbycoef_list, mask, dir)
return(NULL)
}
analyze_coupled_images(coupled_dir = file.path(settings$output_dir, "niftis/coupled/global_wcov"),
mask = settings$mask_path,
predictors = predictors)
settings$mask_path
load_images <- function(dir, mask) {
files <- list.files(dir)
file_paths <- file.path(dir, files)
image_vector_list <- lapply(file_paths,
function(x, mask) {
image <- extrantsr::check_ants(x)
image[mask == 0] <- NA
image_vector <- image %>% as.numeric()
image_vector_no_NAs <- image_vector[!is.na(image_vector)]
return(image_vector_no_NAs)
},
mask = mask
)
return(image_vector_list)
}
transpose_list <- function(list) {
matrix <- list %>%
unlist() %>%
matrix(byrow = TRUE, nrow = length(list))
transposed_list <- lapply(seq_len(ncol(matrix)), function(i) matrix[, i])
return(transposed_list)
}
make_descriptive_images <- function(voxel_vector_list) {
descriptive_vector <- lapply(voxel_vector_list, function(voxel_vector) {
voxel_mean <- sum(voxel_vector)/length(voxel_vector)
voxel_variance <- var(voxel_vector)
return(c(voxel_mean, voxel_variance))
}) %>% unlist()
voxel_mean_vector <- descriptive_vector[c(T, F)]
voxel_variance_vector <- descriptive_vector[c(F, T)]
return(list(voxel_mean_vector, voxel_variance_vector))
}
get_pvals_by_voxel <- function(voxel_vector, predictors) {
if (length(voxel_vector) != nrow(predictors)) {
stop("n doesn't match")
}
regression <- lm(voxel_vector ~
sex + ageAtScan1 +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion,
data = predictors) %>%
summary()
reg_pvals <- regression$coefficients[c(2, 3), 4]
interaction_regression <- lm(voxel_vector ~
sex * ageAtScan1 +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion,
data = predictors) %>%
summary()
int_pvals <- interaction_regression$coefficients[8, 4]
gam_regression_interaction <- gam(voxel_vector ~ ageAtScan1 + sex + ageAtScan1*sex +
s(ageAtScan1, by = sex, k = 25, fx = TRUE) +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion,
data = predictors)
gam_regression_base <- gam(voxel_vector ~ ageAtScan1 + sex +
s(ageAtScan1, k = 25, fx = TRUE) +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion,
data = predictors)
gam_pvals <- anova(gam_regression_interaction, gam_regression_base, test="LRT")$Pr[2]
pvals <- c(reg_pvals, int_pvals, gam_pvals)
return(pvals)
}
write_pvals <- function(image_list, mask, dir, is_descriptive = FALSE) {
mask_indices <- which(as.array(mask) > 0)
reference <- extrantsr::check_ants(file.path(dir, list.files(dir)[[1]]))
file_name <- (dir %>% str_split("/"))[[1]][2]
if (is_descriptive) {
descriptive_dir <- file.path(settings$output_dir, "niftis/descriptive")
dir.create(descriptive_dir, showWarnings = FALSE)
names <- c("_mean", "_variance")
for (i in 1:length(image_list)) {
descriptive_image <- make_ants_image(image_list[[i]], mask_indices, reference)
ANTsRCore::antsImageWrite(
descriptive_image,
file.path(
descriptive_dir,
paste0(file_name, names[i], ".nii.gz")))
}
return(NULL)
}
for (i in 1:length(image_list)) {
pval_image <- make_ants_image(image_list[[i]], mask_indices, reference)
ANTsRCore::antsImageWrite(
pval_image,
file.path(
output_dir, "niftis/pvals",
paste0(file_name, "_pval_", i, ".nii.gz")
)
)
}
return(NULL)
}
analyze_coupled_images <- function(coupled_dir, mask, predictors, cores = 2) {
mask <- extrantsr::check_ants(mask)
image_vector_list <- load_images(coupled_dir, mask)
voxel_vector_list <- transpose_list(image_vector_list)
descriptive_list <- make_descriptive_images(voxel_vector_list)
pvalbyvoxel_list <- parallel::mclapply(voxel_vector_list,
get_pvals_by_voxel,
predictors = predictors,
mc.cores = cores)
pvalbycoef_list <- transpose_list(pvalbyvoxel_list)
write_pvals(descriptive_list, mask, dir, is_descriptive = TRUE)
write_pvals(pvalbycoef_list, mask, dir)
return(NULL)
}
analyze_coupled_images(coupled_dir = file.path(settings$output_dir, "niftis/coupled/global_wcov"),
mask = settings$mask_path,
predictors = predictors)
settings$mask_path
check_ants(settings$mask_path)
analyze_coupled_images <- function(coupled_dir, mask, predictors, cores = 2) {
mask <- extrantsr::check_ants(mask)
image_vector_list <- load_images(coupled_dir, mask)
voxel_vector_list <- transpose_list(image_vector_list)
descriptive_list <- make_descriptive_images(voxel_vector_list)
pvalbyvoxel_list <- parallel::mclapply(voxel_vector_list,
get_pvals_by_voxel,
predictors = predictors,
mc.cores = cores)
pvalbycoef_list <- transpose_list(pvalbyvoxel_list)
write_pvals(descriptive_list, mask, coupled_dir, is_descriptive = TRUE)
write_pvals(pvalbycoef_list, mask, coupled_dir)
return(NULL)
}
analyze_coupled_images(coupled_dir = file.path(settings$output_dir, "niftis/coupled/global_wcov"),
mask = settings$mask_path,
predictors = predictors)
?make_ants_image
