}
}
}
# Will use to map back to niftis
inds <- nhoods[[1]]$indices
offs <- nhoods[[1]]$offsets
# ANTsR version 0.3.2 used 0 first index instead of 1
# This was changed here: https://github.com/stnava/ANTsR/commit/706148aa994d414c9efd76e9292ae99351e2c4be
# Thus, have commented out the following line and require latest release of ANTsR version 0.3.3
# inds = inds + 1
# Will use to compute distances from center voxel
nhood_weights <- get_weights(offs, vDims, sigma = nhood_dims$sigma)
pca_object <- imco_pca(
files = fileList,
nhoods = nhoods,
nhood_weights = nhood_weights,
mask_indices = mask_indices,
verbose = verbose,
full_pca_dir = full_pca_dir,
prop_miss = prop_miss,
pca_type = pca_type,
matrix_type = matrix_type,
return_neighborhoods = return_neighborhoods
)
eigenvalues <- pca_object$eigenValueImages
eigenvalue_sum <- Reduce("+", eigenvalues)
coupling <- eigenvalues[[1]] / eigenvalue_sum
antsImageWrite(coupling, file.path(out_dir, paste0(out_name, "_coupling.nii.gz")))
return(coupling)
}
#' Intermodal Coupling with PCA
#'
#' @param files TODO
#' @param nhoods TODO
#' @param nhood_weights TODO
#' @param mask_indices TODO
#' @param verbose TRUE or FALSE
#' @param full_pca_dir TODO
#' @param prop_miss TODO
#' @param pca_type "global" or "unscaled"
#' @param matrix_type "wcov" or "wcor"
#' @param return_neighborhoods TRUE or FALSE
#'
#' @return TODO
#'
#' @examples
#' \dontrun{
#' TODO
#' }
#' @importFrom rlist list.rbind
#' @importFrom stats cov
#' @importFrom ANTsRCore antsImageWrite
imco_pca <- function(files,
nhoods, nhood_weights,
mask_indices,
verbose = TRUE, full_pca_dir = NULL,
prop_miss = NULL, pca_type = NULL, matrix_type = NULL,
return_neighborhoods = FALSE) {
# Restructure to get eigen decomp at each voxel
imgVals <- lapply(nhoods, function(x) x$values)
bigDf <- rlist::list.rbind(imgVals)
matList <- lapply(split(bigDf, col(bigDf)),
function(x) matrix(x, ncol = length(files)))
rmnaList <- lapply(matList, function(x) {
w <- nhood_weights
xRows <- apply(as.matrix(x), 1, function(z) {
!any(is.na(z))
})
if (sum(xRows) > 2) {
# If the proportion of missing voxels is greater than prop_miss, return NA
if (mean(!xRows) > prop_miss) {
return(NA)
} else {
return(cbind(w[xRows], as.matrix(x)[xRows, ]))
}
}
return(NA)
})
if (return_neighborhoods == TRUE) {
return(rmnaList)
}
if (verbose) {
cat("# Computing weighted covariances \n")
}
rmnaListCenter <- lapply(rmnaList, function(x) {
if (!is.na(x)[1]) {
w <- x[, 1]
newx <- scale(x[, -1], center = TRUE, scale = FALSE)
return(cbind(w, newx))
}
return(NA)
})
rm(rmnaList)
# Weighted cov of each matrix in matList
if (matrix_type == "wcov") {
wcovList <- lapply(rmnaListCenter, function(x) {
if (!is.na(x)[1]) {
w <- x[, 1]
newx <- x[, -1]
return(stats::cov.wt(newx, wt = w, center = FALSE)$cov)
}
return(NA)
})
}
if (matrix_type == "wcor") {
wcovList <- lapply(rmnaListCenter, function(x) {
if (!is.na(x)[1]) {
w <- x[, 1]
newx <- x[, -1]
return(stats::cov.wt(newx, wt = w, center = FALSE, cor = T)$cor)
}
return(NA)
})
}
wcovList_corrected <- lapply(wcovList, function(x) {
if (any(is.na(x) | x == 0)) {
x <- NA
}
return(x)
})
if (verbose) {
cat("# Computing weighted PCs \n")
}
eigenList <- lapply(wcovList_corrected, function(x) {
if (!is.na(x)[1]) {
return(eigen(x))
} else {
return(NA)
}
})
rm(wcovList)
if (verbose) {
cat("# Extracting IMCo images \n")
}
evals <- list()
components <- list()
for (j in 1:length(files)) {
tmp <- as.vector(
rlist::list.rbind(
lapply(
eigenList,
function(x) {
if (!is.na(x)[1]) {
return(x$values[j])}
else {
return(NA) }
})))
evals[[j]] <- make_ants_image(vec = tmp, mask_indices = mask_indices, reference = files[[1]])
if (!is.null(full_pca_dir)) {
ANTsRCore::antsImageWrite(evals[[j]], file.path(full_pca_dir, paste0("eigenValue-", j, ".nii.gz")))
}
components[[j]] <- list()
for (k in 1:length(files)) {
tmp <- as.vector(
rlist::list.rbind(
lapply(
eigenList, function(x) {
if (!is.na(x)[1]) {
return(x$vectors[k, j]) }
else {
return(NA) }
})))
components[[j]][[k]] <- make_ants_image(vec = tmp, mask_indices = mask_indices, reference = files[[1]])
if (!is.null(full_pca_dir)) {
ANTsRCore::antsImageWrite(components[[j]][[k]], file.path(full_pca_dir, paste0("component", j, "-", k, ".nii.gz")))
}
}
}
rm(eigenList)
evals <- lapply(evals, extrantsr::ants2oro)
for (j in 1:length(files)) {
temp <- lapply(components[[j]], extrantsr::ants2oro)
components[[j]] <- lapply(components[[j]], extrantsr::ants2oro)
}
return(list("eigenValueImages" = evals, "eigenVectorImages" = components))
}
load_images <- function(dir, mask) {
files <- list.files(dir)
file_paths <- file.path(dir, files)
image_vector_list <- lapply(file_paths,
function(x, mask) {
image <- extrantsr::check_ants(x)
image[mask == 0] <- NA
image_vector <- image %>% as.numeric()
image_vector_no_NAs <- image_vector[!is.na(image_vector)]
return(image_vector_no_NAs)
},
mask = mask
)
return(image_vector_list)
}
transpose_list <- function(list) {
matrix <- list %>%
unlist() %>%
matrix(byrow = TRUE, nrow = length(list))
transposed_list <- lapply(seq_len(ncol(matrix)), function(i) matrix[, i])
return(transposed_list)
}
make_descriptive_images <- function(voxel_vector_list) {
descriptive_vector <- lapply(voxel_vector_list, function(voxel_vector) {
voxel_mean <- sum(voxel_vector)/length(voxel_vector)
voxel_variance <- var(voxel_vector)
return(c(voxel_mean, voxel_variance))
}) %>% unlist()
voxel_mean_vector <- descriptive_vector[c(T, F)]
voxel_variance_vector <- descriptive_vector[c(F, T)]
return(list(voxel_mean_vector, voxel_variance_vector))
}
#' Calculates pvals for each voxel
#'
#' @param voxel_vector vector of length 1xn, where n is number of subjects
#' @param predictors design matrix of predictors
#'
#' @return vector of p-values from various models
#' @export
#'
#' @examples
#' \dontrun{
#' get_pvals_by_voxel(1:5, matrix(1:10, nrow = 5))
#' }
#' @importFrom stats lm var
get_pvals_by_voxel <- function(voxel_vector, predictors) {
if (length(voxel_vector) != nrow(predictors)) {
stop("n doesn't match")
}
regression <- stats::lm(voxel_vector ~
sex + ageAtScan1 +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion,
data = predictors) %>%
summary()
reg_pvals <- regression$coefficients[c(2, 3), 4]
interaction_regression <- stats::lm(voxel_vector ~
sex * ageAtScan1 +
race2 + pcaslRelMeanRMSMotion + restRelMeanRMSMotion,
data = predictors) %>%
summary()
int_pvals <- interaction_regression$coefficients[8, 4]
pvals <- c(reg_pvals, int_pvals)
return(pvals)
}
#' Writes p-values to antsImage
#'
#' @param image_list TODO
#' @param mask TODO
#' @param dir TODO
#' @param is_descriptive TODO
#' @param out_dir TODO
#'
#' @return TODO
#' @export
#'
#' @examples
#' \dontrun{
#' TODO
#' }
#' @importFrom stringr str_split
write_pvals <- function(image_list, mask, dir, is_descriptive = FALSE, out_dir) {
mask_indices <- which(as.array(mask) > 0)
reference <- extrantsr::check_ants(file.path(dir, list.files(dir)[[1]]))
file_name <- (dir %>% stringr::str_split("/"))[[1]][2]
if (is_descriptive) {
dir.create("three_modality/descriptive_images", showWarnings = FALSE)
names <- c("_mean", "_variance")
for (i in 1:length(image_list)) {
descriptive_image <- make_ants_image(image_list[[i]], mask_indices, reference)
ANTsRCore::antsImageWrite(
descriptive_image,
file.path(
out_dir,
paste0(file_name, names[i], ".nii.gz")
)
)
}
return(NULL)
}
for (i in 1:length(image_list)) {
pval_image <- make_ants_image(image_list[[i]], mask_indices, reference)
ANTsRCore::antsImageWrite(
pval_image,
file.path(
out_dir,
paste0(file_name, "_pval_", i, ".nii.gz")
)
)
}
return(NULL)
}
hypothesis_test_voxels <- function(dir, mask, predictors, out_dir_descriptive, out_dir_pval) {
image_vector_list <- load_images(dir, mask)
voxel_vector_list <- transpose_list(image_vector_list)
descriptive_list <- make_descriptive_images(voxel_vector_list)
pvalbyvoxel_list <- parallel::mclapply(voxel_vector_list,
get_pvals_by_voxel,
predictors = predictors,
mc.cores = as.numeric(Sys.getenv("LSB_DJOB_NUMPROC")))
pvalbycoef_list <- transpose_list(pvalbyvoxel_list)
write_pvals(descriptive_list, mask, dir, is_descriptive = TRUE, out_dir = out_dir_descriptive)
write_pvals(pvalbycoef_list, mask, dir, out_dir = out_dir_pval)
}
imco
library(tidyverse)
library(ANTsRCore)
library(extrantsr)
library(IMCo)
library(parallel)
library(here)
get_nhood_size
idemo_qa <- read_csv(here("input/csvs/idemodata/n1601_idemo_FinalQA_092817.csv"))
idemo <- read_csv(here("input/csvs/idemodata/n1601_idemoBehavior_20151130.csv"))
idemo_health <- read_csv(here("input/csvs/idemodata/n1601_health_20170421.csv"))
pnc_demographics <- read_csv(here("input/csvs/demographics/binded_demographics.csv"))
idemo_qa <- idemo_qa %>% filter(idemoExcludeVoxelwise == 0)
idemo <- idemo %>% filter(idemoBehHappyCorrectCount >= 8)
idemo_health <- idemo_health %>% filter(ltnExcludev2 == 0)
pnc_demographics <- pnc_demographics %>% rename(scanid = "id")
common_pts <- Reduce(intersect, list(idemo_qa$scanid, idemo$scanid, idemo_health$scanid, pnc_demographics$scanid)) %>%
as.data.frame() %>%
rename(subj_num = ".")
input_filepaths <- common_pts %>%
mutate(modality_1 = paste0(subj_num, "_alffStd.nii.gz") %>% file.path("~/Documents/IMCo_analyses/input/niftis/alff", .),
modality_2 = paste0(subj_num, "_asl_quant_ssT1Std.nii.gz") %>% file.path("~/Documents/IMCo_analyses/input/niftis/cbf", .),
modality_3 = paste0(subj_num, "_sigchange_cope1_TaskStd.nii.gz") %>% file.path("~/Documents/IMCo_analyses/input/niftis/idemo", .))
write_csv(input_filepaths, here("input/csvs/input_filepaths.csv"))
rm(common_pts, idemo, idemo_health, idemo_qa, pnc_demographics)
devtools::install_github("hufengling/IMCo_PCA")
IMCo::get_nhood_size()
IMCo::get_nhood_size
imco()
imco
library(tidyverse)
library(ANTsRCore)
library(extrantsr)
library(IMCo)
library(parallel)
library(here)
idemo_qa <- read_csv(here("input/csvs/idemodata/n1601_idemo_FinalQA_092817.csv"))
idemo <- read_csv(here("input/csvs/idemodata/n1601_idemoBehavior_20151130.csv"))
idemo_health <- read_csv(here("input/csvs/idemodata/n1601_health_20170421.csv"))
pnc_demographics <- read_csv(here("input/csvs/demographics/binded_demographics.csv"))
idemo_qa <- idemo_qa %>% filter(idemoExcludeVoxelwise == 0)
idemo <- idemo %>% filter(idemoBehHappyCorrectCount >= 8)
idemo_health <- idemo_health %>% filter(ltnExcludev2 == 0)
pnc_demographics <- pnc_demographics %>% rename(scanid = "id")
common_pts <- Reduce(intersect, list(idemo_qa$scanid, idemo$scanid, idemo_health$scanid, pnc_demographics$scanid)) %>%
as.data.frame() %>%
rename(subj_num = ".")
input_filepaths <- common_pts %>%
mutate(modality_1 = paste0(subj_num, "_alffStd.nii.gz") %>% file.path("~/Documents/IMCo_analyses/input/niftis/alff", .),
modality_2 = paste0(subj_num, "_asl_quant_ssT1Std.nii.gz") %>% file.path("~/Documents/IMCo_analyses/input/niftis/cbf", .),
modality_3 = paste0(subj_num, "_sigchange_cope1_TaskStd.nii.gz") %>% file.path("~/Documents/IMCo_analyses/input/niftis/idemo", .))
write_csv(input_filepaths, here("input/csvs/input_filepaths.csv"))
rm(common_pts, idemo, idemo_health, idemo_qa, pnc_demographics)
output_dir <- here("output") #base directory for all outputs
input_dir <- here("input") #base directory for all inputs
nifti_dir <- "~/Documents/IMCo_analyses/input/niftis"
mask_path <- file.path(input_dir, "references/masks/gm10_pcals_rest.nii.gz")
batch_script_dir <- here("R/batch_scripts")
fwhm <- 3
prop_miss <- 0.9
settings <- list(input_filepaths_path = file.path(input_dir, "csvs/input_filepaths.csv"),
output_dir = output_dir,
input_dir = input_dir,
nifti_dir = nifti_dir,
batch_script_dir = batch_script_dir,
mask_path = mask_path,
fwhm = fwhm,
prop_miss = prop_miss)
input_filepaths <- read_csv(file.path(input_dir, "csvs/input_filepaths.csv"))
save(settings, file = file.path(input_dir, "csvs/settings.RData"))
rm(output_dir, input_dir, nifti_dir, mask_path, batch_script_dir, fwhm, prop_miss)
demographics <- read_csv(here("input/csvs/demographics/binded_demographics.csv")) %>%
rename(subj_num = id)
demographics <- right_join(demographics, input_filepaths,
by = "subj_num") %>%
mutate(across(contains("Exclude"), as.factor),
sex = case_when(
sex == 1 ~ "Male",
sex == 2 ~ "Female",
T ~ NA_character_),
race2 = case_when(
race2 == 1 ~ "White",
race2 == 2 ~ "Black",
race2 == 3 ~ "Other",
T ~ NA_character_),
across(c(sex, race, race2, ethnicity, handednessv2), as.factor))
predictors <- demographics %>%
select(sex, ageAtScan1, race2, pcaslRelMeanRMSMotion, restRelMeanRMSMotion)
rm(demographics)
# bash_file <- rep(0, 2)
# for(i in 1:2) {
bash_file <- rep(0, nrow(input_filepaths))
for(i in 1:nrow(input_filepaths)) {
line <- input_filepaths[i, ]
out_name <- line[1]
subject_files <- paste(line[1, 2], line[1, 3], line[1, 4], sep = ",")
bsub_args <- paste("bsub",
"-q taki_normal",
paste("-J", shQuote("intermodal_coupling")),
paste("-R", shQuote("rusage[mem=4000]")),
"-M 10000",
paste("-o", file.path(settings$output_dir, "stdout/intermodal_coupling.txt")))
Rscript_args <- paste("Rscript", here("R/batch_scripts/01_perform_imco.R"),
subject_files,
settings$mask_path,
settings$output_dir,
out_name,
settings$fwhm,
settings$prop_miss)
bash_file[i] <- paste(bsub_args, Rscript_args)
}
write_lines(bash_file, file.path(settings$batch_script_dir, "01_commands.sh"))
rm(line, out_name, bsub_args, i, Rscript_args, subject_files)
rm(line, out_name, bsub_args, i, Rscript_args, subject_files)
any(c(0, 1, 3) == 0)
any(c(0, 1, 3) == 0)
any(c(0, 1, 3) == 0 | is.na(3))
any(c(1, 3) == 0 | is.na(3))
any(c(1, 3) == 0 | is.na(NA))
any(c(1, 3) == 0 | is.na(c(3, 3, NA)))
any(c(1, 3) == 0 | is.na(c(3, 3, NA)))
any(c(1, 3) == 0 || is.na(c(3, 3, NA)))
list(NA)
list(NA)[[1]][1] %>% is.na()
source("~/Documents/packages/IMCo/R/imco.R", echo=TRUE)
# Chunk 1
library(tidyverse)
library(ANTsRCore)
library(extrantsr)
library(IMCo)
library(parallel)
library(here)
# Chunk 2
idemo_qa <- read_csv(here("input/csvs/idemodata/n1601_idemo_FinalQA_092817.csv"))
idemo <- read_csv(here("input/csvs/idemodata/n1601_idemoBehavior_20151130.csv"))
idemo_health <- read_csv(here("input/csvs/idemodata/n1601_health_20170421.csv"))
pnc_demographics <- read_csv(here("input/csvs/demographics/binded_demographics.csv"))
idemo_qa <- idemo_qa %>% filter(idemoExcludeVoxelwise == 0)
idemo <- idemo %>% filter(idemoBehHappyCorrectCount >= 8)
idemo_health <- idemo_health %>% filter(ltnExcludev2 == 0)
pnc_demographics <- pnc_demographics %>% rename(scanid = "id")
common_pts <- Reduce(intersect, list(idemo_qa$scanid, idemo$scanid, idemo_health$scanid, pnc_demographics$scanid)) %>%
as.data.frame() %>%
rename(subj_num = ".")
input_filepaths <- common_pts %>%
mutate(modality_1 = paste0(subj_num, "_alffStd.nii.gz") %>% file.path("~/Documents/IMCo_analyses/input/niftis/alff", .),
modality_2 = paste0(subj_num, "_asl_quant_ssT1Std.nii.gz") %>% file.path("~/Documents/IMCo_analyses/input/niftis/cbf", .),
modality_3 = paste0(subj_num, "_sigchange_cope1_TaskStd.nii.gz") %>% file.path("~/Documents/IMCo_analyses/input/niftis/idemo", .))
write_csv(input_filepaths, here("input/csvs/input_filepaths.csv"))
rm(common_pts, idemo, idemo_health, idemo_qa, pnc_demographics)
# Chunk 3
output_dir <- here("output") #base directory for all outputs
input_dir <- here("input") #base directory for all inputs
nifti_dir <- "~/Documents/IMCo_analyses/input/niftis"
mask_path <- file.path(input_dir, "references/masks/gm10_pcals_rest.nii.gz")
batch_script_dir <- here("R/batch_scripts")
fwhm <- 3
prop_miss <- 0.9
settings <- list(input_filepaths_path = file.path(input_dir, "csvs/input_filepaths.csv"),
output_dir = output_dir,
input_dir = input_dir,
nifti_dir = nifti_dir,
batch_script_dir = batch_script_dir,
mask_path = mask_path,
fwhm = fwhm,
prop_miss = prop_miss)
input_filepaths <- read_csv(file.path(input_dir, "csvs/input_filepaths.csv"))
save(settings, file = file.path(input_dir, "csvs/settings.RData"))
rm(output_dir, input_dir, nifti_dir, mask_path, batch_script_dir, fwhm, prop_miss)
# Chunk 4
demographics <- read_csv(here("input/csvs/demographics/binded_demographics.csv")) %>%
rename(subj_num = id)
demographics <- right_join(demographics, input_filepaths,
by = "subj_num") %>%
mutate(across(contains("Exclude"), as.factor),
sex = case_when(
sex == 1 ~ "Male",
sex == 2 ~ "Female",
T ~ NA_character_),
race2 = case_when(
race2 == 1 ~ "White",
race2 == 2 ~ "Black",
race2 == 3 ~ "Other",
T ~ NA_character_),
across(c(sex, race, race2, ethnicity, handednessv2), as.factor))
predictors <- demographics %>%
select(sex, ageAtScan1, race2, pcaslRelMeanRMSMotion, restRelMeanRMSMotion)
rm(demographics)
bash_file <- rep(0, 2)
for(i in 1:2) {
# bash_file <- rep(0, nrow(input_filepaths))
# for(i in 1:nrow(input_filepaths)) {
line <- input_filepaths[i, ]
out_name <- line[1]
subject_files <- paste(line[1, 2], line[1, 3], line[1, 4], sep = ",")
bsub_args <- paste("bsub",
"-q taki_normal",
paste("-J", shQuote("intermodal_coupling")),
paste("-R", shQuote("rusage[mem=4000]")),
"-M 10000",
paste("-o", file.path(settings$output_dir, "stdout/intermodal_coupling.txt")))
Rscript_args <- paste("Rscript", here("R/batch_scripts/01_perform_imco.R"),
subject_files,
settings$mask_path,
settings$output_dir,
out_name,
settings$fwhm,
settings$prop_miss)
bash_file[i] <- paste(bsub_args, Rscript_args)
}
write_lines(bash_file, file.path(settings$batch_script_dir, "01_commands.sh"))
#RUNOTHER
rm(line, out_name, bsub_args, i, Rscript_args, subject_files)
